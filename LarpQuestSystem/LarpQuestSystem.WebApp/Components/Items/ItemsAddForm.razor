@using System.Net
@using LarpQuestSystem.Data.Model
@using Newtonsoft.Json
@using LarpQuestSystem.WebApp.Components.Utils

@inject HttpClient Http
@inject IModalService Modal

@if (!_showForm)
{
    <div style="margin-bottom: 10px">
        <button class="btn btn-primary" @onclick="@ShowForm">Создать предмет</button>
    </div>
}
else
{
    <div class="form-group row">
        <label for="txtChainName" class="col-sm-2 col-form-label">Название предмета</label>
        <div class="col-sm-10">
            <input type="text" id="txtChainName" class="form-control" @bind="@_item.Name" />
        </div>
    </div>
    <div class="form-group row">
        <label for="txtChainDescription" class="col-sm-2 col-form-label">Описание</label>
        <div class="col-sm-10">
            <textarea class="form-control" id="txtChainDescription" rows="5" @bind="@_item.Description"></textarea>
        </div>
    </div>
    <div class="form-group row">
        <label for="questComplexity" class="col-sm-2 col-form-label">Тип предмета</label>
        <div class="col-sm-10">
            <select id="questComplexity" @bind="@_item.ItemType">
                @foreach (int complexity in Enum.GetValues(typeof(ItemType)))
                {
                    <option value="@complexity">@GetStringItemTypeValue(complexity)</option>
                }
            </select>
        </div>
    </div>
    <div class="form-group row">
        <label for="txtAmountToPrint" class="col-sm-2 col-form-label">Количество готовых предметов</label>
        <div class="col-sm-10">
            <input type="text" id="txtAmountToPrint" class="form-control" @bind="@_amountReadyString" />
        </div>
    </div>
    <div class="form-group">
        <button class="btn btn-primary" @onclick="@Submit">Сохранить</button>
        <button class="btn btn-primary" @onclick="@HideForm">Отмена</button>
    </div>
}

@code
{
    [CascadingParameter]
    private List<Item> Items { get; set; }

    [CascadingParameter(Name = "BaseApiUrl")] protected string BaseApiUrl { get; set; }

    [Parameter]
    public Action<List<Item>> OnItemsChange { get; set; }

    private bool _showForm;
    private Item _item;
    private string _amountReadyString = "0";


    protected override async Task OnInitializedAsync()
    {
        _item = new Item();
        Items = await Http.GetJsonAsync<List<Item>>($"{BaseApiUrl}/items");
    }

    private void ShowForm()
    {
        _showForm = true;
        StateHasChanged();
    }

    private void HideForm()
    {
        _showForm = false;
        StateHasChanged();
    }

    protected async Task Submit()
    {
        if (string.IsNullOrEmpty(_item.Name))
        {
            var parameters = new ModalParameters();
            parameters.Add("Message", "Имя не может быть пустым.");

            Modal.Show<Notification>("Notification", parameters);
        }
        else if (!int.TryParse(_amountReadyString, out int result) || result < 0)
        {
            var parameters = new ModalParameters();
            parameters.Add("Message", "Введите нормальное число предметов. Будьте людьми то.");

            Modal.Show<Notification>("Notification", parameters);
        }
        else
        {
            var requestMessage = new HttpRequestMessage()
            {
                Method = new HttpMethod("POST"),
                RequestUri = new Uri($"{BaseApiUrl}/items"),
                Content =
                    new StringContent(JsonConvert.SerializeObject(new Item
                    {
                        Name = _item.Name,
                        Description = _item.Description,
                        ItemType = _item.ItemType,
                        AmountReady = int.Parse(_amountReadyString),
                    })),
            };

            requestMessage.Content.Headers.ContentType =
                new System.Net.Http.Headers.MediaTypeHeaderValue(
                    "application/json");

            var response = await Http.SendAsync(requestMessage);
            if (response.IsSuccessStatusCode)
            {
                var jsonTask = response.Content.ReadAsStringAsync();
                jsonTask.Wait();
                _item = JsonConvert.DeserializeObject<Item>(jsonTask.Result);
                ChangeItems();
                _item = new Item();
                _showForm = false;
                StateHasChanged();
            }

            if (response.StatusCode == HttpStatusCode.Conflict)
            {
                var parameters = new ModalParameters();
                parameters.Add("Message", "Предмет с таким названием уже существует.");

                Modal.Show<Notification>("Notification", parameters);
            }
        }
    }

    private string GetStringItemTypeValue(int itemType)
    {
        var enumValue = (ItemType)itemType;
        return enumValue.GetStringValue();
    }

    private void ChangeItems()
    {
        Items.Add(_item);
        OnItemsChange?.Invoke(Items);
    }
}
