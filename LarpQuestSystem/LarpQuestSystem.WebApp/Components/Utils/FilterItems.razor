@using LarpQuestSystem.Data.Model
@inject NavigationManager NavigationManager

@if (!_isSelected)
{
    <div>
        <div class="col-sm-10">
            <input type="text" id="txtFilter" @bind-value="@Filter" @bind-value:event="oninput" />
        </div>
        <div class="col-sm-10">
            <select id="nextItem" size="5" @onchange="@SelectItem">
                @foreach (var item in _filteredItems)
                {
                    <option value="@item">@item</option>
                }
            </select>
        </div>
    </div>
}
else
{
    <button class="btn btn-primary" @onclick="@ToggleComponent">@_selectedItem</button>
}
@code
{
    private List<string> _filteredItems;
    private string _filterString = string.Empty;
    private string _selectedItem;
    private bool _isSelected;

    [Parameter]
    public List<string> Items { get; set; }
    [Parameter]
    public string SelectedItem { get; set; }

    [Parameter]
    public Action<string> OnItemSelect { get; set; }

    public string Filter
    {
        get => _filterString;
        set
        {
            _filterString = value;
            Filtering();
        }
    }

    protected override Task OnParametersSetAsync()
    {
        if (SelectedItem != null && _isSelected == false)
        {
            _selectedItem = SelectedItem;
            _isSelected = true;
        }
        _filteredItems = Items;
        return base.OnParametersSetAsync();
    }

    private void Filtering()
    {
        _filteredItems = Items.Where(x => x.Contains(_filterString, StringComparison.OrdinalIgnoreCase)).ToList();
        StateHasChanged();
    }

    private void SelectItem(ChangeEventArgs e)
    {
        _selectedItem = e.Value.ToString();
        Filter = string.Empty;
        ToggleComponent();
    }

    private void ToggleComponent()
    {
        if (_isSelected)
        {
            SelectedItem = null;
        }
        _isSelected = !_isSelected;
        OnItemSelect?.Invoke(_selectedItem);
        StateHasChanged();
    }

}
