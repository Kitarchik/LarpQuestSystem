@using System.Net
@using LarpQuestSystem.Data.Model
@using Newtonsoft.Json
@inject HttpClient Http
@inject IModalService Modal

@if (!_showForm)
{
    <div style="margin-bottom: 10px">
        <button class="btn btn-primary" @onclick="ShowForm">Создать локацию</button>
    </div>
}
else
{
    <EditForm Model="@_locationToAdd" OnValidSubmit="@Submit">
        <DataAnnotationsValidator></DataAnnotationsValidator>

        <div class="form-group row">
            <label for="txtQuestName" class="col-sm-2 col-form-label">Название локации</label>
            <div class="col-sm-10">
                <InputText id="txtQuestName" class="form-control" @bind-Value="@_locationToAdd.Name"></InputText>
                <ValidationMessage For="@(() => _locationToAdd.Name)"></ValidationMessage>
            </div>
        </div>
        <div class="form-group row">
            <label for="txtLocationDescription" class="col-sm-2 col-form-label">Описание</label>
            <div class="col-sm-10">
                <textarea class="form-control" id="txtLocationDescription" rows="5" @bind="@_locationToAdd.Description"></textarea>
            </div>
        </div>
        <div class="form-group">
            <button type="submit" class="btn btn-primary">Сохранить</button>
            <button class="btn btn-primary" @onclick="HideForm">Отмена</button>
        </div>
    </EditForm>
}

@code
{
    [CascadingParameter]
    private List<Location> Locations { get; set; }

    [CascadingParameter(Name = "BaseApiUrl")] protected string BaseApiUrl { get; set; }

    [Parameter]
    public Action<List<Location>> OnLocationsChange { get; set; }

    private Location _locationToAdd;
    private bool _showForm;

    protected override void OnInitialized()
    {
        _locationToAdd = new Location();
        base.OnInitialized();
    }

    private void ShowForm()
    {
        _showForm = true;
        StateHasChanged();
    }

    private void HideForm()
    {
        _showForm = false;
        StateHasChanged();
    }

    protected async Task Submit()
    {
        if (string.IsNullOrEmpty(_locationToAdd.Name))
        {
            var parameters = new ModalParameters();
            parameters.Add("Message", "Имя не может быть пустым.");

            Modal.Show<Notification>("Notification", parameters);
        }
        else
        {
            var requestMessage = new HttpRequestMessage()
            {
                Method = new HttpMethod("POST"),
                RequestUri = new Uri($"{BaseApiUrl}/locations"),
                Content =
                    new StringContent(JsonConvert.SerializeObject(_locationToAdd)),
            };

            requestMessage.Content.Headers.ContentType =
                new System.Net.Http.Headers.MediaTypeHeaderValue(
                    "application/json");

            var response = await Http.SendAsync(requestMessage);
            if (response.IsSuccessStatusCode)
            {
                var jsonTask = response.Content.ReadAsStringAsync();
                jsonTask.Wait();
                _locationToAdd = JsonConvert.DeserializeObject<Location>(jsonTask.Result);
                await ChangeLocations();
                _locationToAdd = new Location();
                _showForm = false;
                StateHasChanged();
            }

            if (response.StatusCode == HttpStatusCode.Conflict)
            {
                var parameters = new ModalParameters();
                parameters.Add("Message", "Локация с таким именем уже существует.");

                Modal.Show<Notification>("Notification", parameters);
            }
        }
    }

    private async Task ChangeLocations()
    {
        var newLocation = await Http.GetJsonAsync<Location>($"{BaseApiUrl}/locations/{_locationToAdd.Id}");
        Locations.Add(newLocation);
        OnLocationsChange?.Invoke(Locations);
    }
}
