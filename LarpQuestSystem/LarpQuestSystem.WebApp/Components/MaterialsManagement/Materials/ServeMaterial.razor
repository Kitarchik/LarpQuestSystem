@page "/materials/serve/{SingleMaterialRequestId:int}"
@attribute [Authorize(Policy = Policies.IsMaterialsManager)]
@using LarpQuestSystem.Data.Model.MaterialManagement
@using LarpQuestSystem.Data.Model.Security
@using LarpQuestSystem.WebApp.Components.Utils

@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IModalService Modal

<h1>Стройматериал</h1>

@if (_singleMaterialRequest == null)
{
    <p><em>@_message</em></p>
}
else
{
    <p><em>Заказчик: @_singleMaterialRequest.Customer</em></p>
    <p><em>Оплачен: @(_singleMaterialRequest.IsPayed ? "Да" : "Нет")</em></p>
    <p><em>Локация : @_singleMaterialRequest.LocationName</em></p>
    <p><em>Заказанное кол-во: @_singleMaterialRequest.QuantityOrdered</em></p>
    <p><em>Отданное кол-во: @_singleMaterialRequest.QuantityServed</em></p>
    <div class="form-group row">
        <label for="txtAmountToServe" class="col-sm-2 col-form-label">Сколько выдано?</label>
        <div class="col-sm-10">
            <input type="text" id="txtAmountToServe" class="form-control" @bind="@_amountToServeString" />
        </div>
    </div>
    <div style="margin-bottom: 10px">
        <button class="btn btn-primary" @onclick="@Serve">Отгрузить</button>
        <button class="btn btn-primary" @onclick="@Cancel">Отмена</button>
    </div>
}

@code {
    private string _message = "Загрузка...";
    private SingleMaterialRequestInfoView _singleMaterialRequest;
    private string _amountToServeString = "0";

    [Parameter]
    public int SingleMaterialRequestId { get; set; }

    [CascadingParameter(Name = "BaseApiUrl")]
    protected string BaseApiUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _singleMaterialRequest = await Http.GetJsonAsync<SingleMaterialRequestInfoView>($"{BaseApiUrl}/singlematerialrequests/{SingleMaterialRequestId}");
    }

    protected async Task Serve()
    {
        if (!int.TryParse(_amountToServeString, out int result) || result < 1)
        {
            var parameters = new ModalParameters();
            parameters.Add("Message", "Введите нормальную количество. Будьте людьми то.");

            Modal.Show<Notification>("Notification", parameters);
        }
        else if (result > _singleMaterialRequest.QuantityOrdered - _singleMaterialRequest.QuantityServed)
        {
            var parameters = new ModalParameters();
            parameters.Add("Message", "Это больше, чем заказано.");

            Modal.Show<Notification>("Notification", parameters);
        }
        else
        {
            _singleMaterialRequest.QuantityServed += result;
            await Http.PutJsonAsync<SingleMaterialRequestInfoView>($"{BaseApiUrl}/singlematerialrequests", _singleMaterialRequest);
        }
    }

    protected void Cancel()
    {
        NavigationManager.NavigateTo($"/materialsrequests/{_singleMaterialRequest.MaterialsRequestId}");
    }
}