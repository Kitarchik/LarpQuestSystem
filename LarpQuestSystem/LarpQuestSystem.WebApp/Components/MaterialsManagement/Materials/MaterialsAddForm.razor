@using System.Net
@using LarpQuestSystem.Data.Model.MaterialManagement
@using LarpQuestSystem.Data.Model.QuestSystem
@using LarpQuestSystem.Data.Model.Utilities
@using Newtonsoft.Json
@using LarpQuestSystem.WebApp.Components.Utils

@inject HttpClient Http
@inject IModalService Modal

@if (!_showForm)
{
    <div style="margin-bottom: 10px">
        <button class="btn btn-primary" @onclick="@ShowForm">Создать стройматериал</button>
    </div>
}
else
{
    <div class="form-group row">
        <label for="txtMaterialName" class="col-sm-2 col-form-label">Имя материала</label>
        <div class="col-sm-10">
            <input type="text" id="txtMaterialName" class="form-control" @bind="@_material.Name" />
        </div>
    </div>
    <div class="form-group row">
        <label for="txtPrice" class="col-sm-2 col-form-label">Цена</label>
        <div class="col-sm-10">
            <input type="text" id="txtPrice" class="form-control" @bind="@_priceString" />
        </div>
    </div>
    <div class="form-group row">
        <label for="txtAmountPerPayedRequest" class="col-sm-2 col-form-label">Сколько положено единиц за одну оплаченную заявку</label>
        <div class="col-sm-10">
            <input type="text" id="txtAmountPerPayedRequest" class="form-control" @bind="@_amountPerPayedRequestString" />
        </div>
    </div>
    <div class="form-group row">
        <label for="unitsOfMeasure" class="col-sm-2 col-form-label">Единицы измерения</label>
        <div class="col-sm-10">
            <select id="unitsOfMeasure" @bind="@_material.UnitOfMeasure">
                @foreach (int unit in Enum.GetValues(typeof(MaterialUnitOfMeasure)))
                {
                    <option value="@unit">@GetStringUnitValue(unit)</option>
                }
            </select>
        </div>
    </div>
    <div class="form-group">
        <button class="btn btn-primary" @onclick="@Submit">Сохранить</button>
        <button class="btn btn-primary" @onclick="@HideForm">Отмена</button>
    </div>
}

@code
{
    [CascadingParameter]
    private List<MaterialWithTotalView> Materials { get; set; }

    [CascadingParameter(Name = "BaseApiUrl")] protected string BaseApiUrl { get; set; }

    [Parameter]
    public Action<List<MaterialWithTotalView>> OnMaterialsChange { get; set; }

    private bool _showForm;
    private Material _material;
    private string _priceString = string.Empty;
    private string _amountPerPayedRequestString = "0";

    protected override void OnInitialized()
    {
        _material = new Material();
        base.OnInitialized();
    }

    private void ShowForm()
    {
        _showForm = true;
        StateHasChanged();
    }

    private void HideForm()
    {
        _showForm = false;
        StateHasChanged();
    }

    protected async Task Submit()
    {
        if (string.IsNullOrEmpty(_material.Name))
        {
            var parameters = new ModalParameters();
            parameters.Add("Message", "Имя не может быть пустым.");

            Modal.Show<Notification>("Notification", parameters);
        }
        else if (!int.TryParse(_priceString, out int result) || result < 1)
        {
            var parameters = new ModalParameters();
            parameters.Add("Message", "Введите нормальную цену. Будьте людьми то.");

            Modal.Show<Notification>("Notification", parameters);
        }
        else if (!int.TryParse(_amountPerPayedRequestString, out int result2) || result2 < 0)
        {
            var parameters = new ModalParameters();
            parameters.Add("Message", "Введите нормальное число единиц за заявку. Будьте людьми то.");

            Modal.Show<Notification>("Notification", parameters);
        }
        else
        {
            _material.Price = int.Parse(_priceString);
            _material.AmountPerPayedRequestInLocation = int.Parse(_amountPerPayedRequestString);
            var requestMessage = new HttpRequestMessage()
            {
                Method = new HttpMethod("POST"),
                RequestUri = new Uri($"{BaseApiUrl}/materials"),
                Content =
                    new StringContent(JsonConvert.SerializeObject(_material)),
            };

            requestMessage.Content.Headers.ContentType =
                new System.Net.Http.Headers.MediaTypeHeaderValue(
                    "application/json");

            var response = await Http.SendAsync(requestMessage);
            if (response.IsSuccessStatusCode)
            {
                var jsonTask = response.Content.ReadAsStringAsync();
                jsonTask.Wait();
                _material = JsonConvert.DeserializeObject<Material>(jsonTask.Result);
                ChangeMaterials();
                _material = new Material();
                _priceString = string.Empty;
                _amountPerPayedRequestString = "0";
                _showForm = false;
                StateHasChanged();
            }

            if (response.StatusCode == HttpStatusCode.Conflict)
            {
                var parameters = new ModalParameters();
                parameters.Add("Message", "Материал с таким именем уже существует.");

                Modal.Show<Notification>("Notification", parameters);
            }
        }
    }

    private string GetStringUnitValue(int unit)
    {
        var enumValue = (QuestComplexity)unit;
        return enumValue.GetStringValue();
    }

    private void ChangeMaterials()
    {
        var materialWithTotalView = new MaterialWithTotalView
        {
            Id = _material.Id,
            Name = _material.Name,
            Price = _material.Price,
            UnitOfMeasure = _material.UnitOfMeasure,
            TotalOrdered = 0,
            TotalServed = 0,
            TotalPayed = 0,
        };
        Materials.Add(materialWithTotalView);
        OnMaterialsChange?.Invoke(Materials);
    }
}
