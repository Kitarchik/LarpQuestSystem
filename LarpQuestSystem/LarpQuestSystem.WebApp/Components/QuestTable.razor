@using LarpQuestSystem.Data.Model
@inject HttpClient Http
@inject NavigationManager NavigationManager

<input type="text" id="filterByName" @bind-value="FilterString" @bind-value:event="oninput" placeholder="Название квеста" />
<table class="table">
    <thead>
        <tr>
            <th>Название квеста</th>
            <th>Квестодатель</th>
            <th>Квестоприниматель</th>
            <th>Сюжетный текст</th>
            <th>Технический текст</th>
            <th>Сложность</th>
            <th>Градация</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var quest in _filteredQuest)
        {
            <tr @onclick="(() => NavigateToQuestView(quest.Id))">
                <td>@quest.Name</td>
                <td>@Npcs.First(x=>x.Id==quest.QuestGiverId).Name</td>
                <td>@Npcs.First(x=>x.Id==quest.QuestEndingId).Name</td>
                <td>
                    @if (quest.IsArtisticTextReady)
                    {
                        <span class="oi oi-check" aria-hidden="true"></span>
                    }
                    else
                    {
                        <span class="oi oi-ban" aria-hidden="true"></span>
                    }
                </td>
                <td>
                    @if (quest.IsTechnicalDescriptionReady)
                    {
                        <span class="oi oi-check" aria-hidden="true"></span>
                    }
                    else
                    {
                        <span class="oi oi-ban" aria-hidden="true"></span>
                    }
                </td>
                <td>@GetComplexity(quest.Complexity)</td>
                <td>@GetGrade(quest.Grade)</td>
            </tr>
        }
    </tbody>
</table>

@code
{
    private List<Quest> _filteredQuest;
    private string _filterString = string.Empty;

    [CascadingParameter]
    private List<Quest> Quests { get; set; }
    [Parameter]
    public List<Npc> Npcs { get; set; }

    public string FilterString
    {
        get => _filterString;
        set
        {
            _filterString = value;
            FilterQuests();
        }
    }

    protected override Task OnParametersSetAsync()
    {
        _filteredQuest = Quests;
        return base.OnParametersSetAsync();
    }

    private void FilterQuests()
    {
        _filteredQuest = Quests.Where(x => x.Name.Contains(_filterString, StringComparison.OrdinalIgnoreCase)).ToList();
        StateHasChanged();
    }

    private void NavigateToQuestView(int questId)
    {
        NavigationManager.NavigateTo($"/quests/{questId}");
    }

    private string GetComplexity(int complexity)
    {
        var enumValue = (QuestComplexity) complexity;
        return enumValue.GetStringValue();
    }

    private string GetGrade(int grade)
    {
        var enumValue = (QuestGrade) grade;
        return enumValue.GetStringValue();
    }

}