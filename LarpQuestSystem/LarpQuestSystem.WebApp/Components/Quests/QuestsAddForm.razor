@using System.Net
@using LarpQuestSystem.Data.Model
@using Newtonsoft.Json
@using LarpQuestSystem.WebApp.Components.Utils

@inject HttpClient Http
@inject IModalService Modal

@if (!_showForm)
{
    <div style="margin-bottom: 10px">
        <button class="btn btn-primary" @onclick="@ShowForm">Создать квест</button>
    </div>
}
else
{
    <div class="form-group row">
        <label for="txtQuestName" class="col-sm-2 col-form-label">Название квеста</label>
        <div class="col-sm-10">
            <input type="text" id="txtQuestName" class="form-control" @bind="@_questToAdd.Name" />
        </div>
    </div>
    <div class="form-group row">
        <label for="txtQuestDescription" class="col-sm-2 col-form-label">Описание</label>
        <div class="col-sm-10">
            <textarea class="form-control" id="txtQuestDescription" rows="5" @bind="@_questToAdd.Description"></textarea>
        </div>
    </div>
    <div class="form-group row">
        <label class="col-sm-2 col-form-label">НПС выдающий квест: </label>
        <FilterItems Items="@_npcs.Select(x=>x.Name).ToList()" OnItemSelect="@SelectQuestGiver" />
    </div>
    <div class="form-group row">
        <label class="col-sm-2 col-form-label">НПС принимающий квест: </label>
        <FilterItems Items="@_npcs.Select(x=>x.Name).ToList()" OnItemSelect="@SelectQuestEnding" />
    </div>
    <div class="form-group row">
        <label for="txtArtisticTextLink" class="col-sm-2 col-form-label">Ссылка на художественный текст</label>
        <div class="col-sm-10">
            <input type="text" id="txtArtisticTextLink" class="form-control" @bind="@_questToAdd.ArtisticTextLink" />
        </div>
    </div>
    <div class="form-group row">
        <label for="txtTechnicalDocumentLink" class="col-sm-2 col-form-label">Ссылка на технический документ</label>
        <div class="col-sm-10">
            <input type="text" id="txtTechnicalDocumentLink" class="form-control" @bind="@_questToAdd.TechnicalDescriptionLink" />
        </div>
    </div>
    <div class="form-group row">
        <label for="txtAmountToPrint" class="col-sm-2 col-form-label">Количество копий в печать</label>
        <div class="col-sm-10">
            <input type="text" id="txtAmountToPrint" class="form-control" @bind="@_amountToPrintString" />
        </div>
    </div>
    <div class="form-group row">
        <label for="questComplexity" class="col-sm-2 col-form-label">Сложность квеста</label>
        <div class="col-sm-10">
            <select id="questComplexity" @bind="@_questToAdd.Complexity">
                @foreach (int complexity in Enum.GetValues(typeof(QuestComplexity)))
                {
                    <option value="@complexity">@GetStringComplexityValue(complexity)</option>
                }
            </select>
        </div>
    </div>
    <div class="form-group row">
        <label for="questGrade" class="col-sm-2 col-form-label">Градация квеста</label>
        <div class="col-sm-10">
            <select id="questGrade" @bind="@_questToAdd.Grade">
                @foreach (int grade in Enum.GetValues(typeof(QuestGrade)))
                {
                    <option value="@grade">@GetStringGradeValue(grade)</option>
                }
            </select>
        </div>
    </div>
    @if (_selectedPlayers != null)
    {

        @for (int i = 0; i < _selectedPlayers.Count; i++)
        {
            <div class="form-group row">
                <div class="col-sm-10">
                    <p><em>Игрок/Команда: @_selectedPlayers[i].Name</em></p>
                </div>
            </div>
        }

    }
    <div class="form-group row">
        <label class="col-sm-2 col-form-label">Фильтр</label>
        <FilterItems Items="@_players.Select(x=>x.Name).ToList()" OnItemSelect="@SelectPlayer" />
    </div>
    <div class="form-group">
        <button class="btn btn-primary" @onclick="@AddPlayer">Добавить игрока</button>
        <button class="btn btn-primary" @onclick="@DeletePlayer">Убрать игрока</button>
    </div>
    @if (_selectedItems != null)
    {

        @for (int i = 0; i < _selectedItems.Count; i++)
        {
            <div class="form-group row">
                <div class="col-sm-10">
                    <p><em>Предмет: @_selectedItems[i].Item.Name  Количество: @_selectedItems[i].AmountNeeded  НПС, хранящий предмет: @_selectedItems[i].StartingNpc.Name</em></p>
                </div>
            </div>
        }

    }
    <div class="form-group row">
        <div class="row col-sm">
            <div class="col-sm my-auto">
                <label class="col-sm-2 col-form-label">Выберите предмет</label>
            </div>
            <div class="row col-sm">
                <FilterItems Items="@_items.Select(x=>x.Name).ToList()" OnItemSelect="@SelectItem" />
            </div>
        </div>
        <div class="row col-sm">
            <div class="col-sm my-auto">
                <label class="col-sm-2 col-form-label">Выберите НПС у которого он хранится</label>
            </div>
            <div class="row col-sm">
                <FilterItems Items="@_npcs.Select(x=>x.Name).ToList()" OnItemSelect="@SelectNpcForItem" />
            </div>
        </div>
        <div class="row col-sm">
            <div class="col-sm my-auto">
                <label for="txtItemAmount" class="col-sm-2 col-form-label">Требуемое количество предметов: </label>
            </div>
            <div class="row col-sm">
                <input type="text" id="txtItemAmount" @bind="@_itemAmountNeeded" />
            </div>
        </div>
        <div class="row col-sm">
            <div class="col-sm my-auto">
                <label for="txtTechnicalDocument" class="col-sm-2 col-form-label">Технический документ для НПС: </label>
            </div>
            <div class="row col-sm">
                <input type="text" id="txtTechnicalDocument" @bind="@_itemTechnicalDocument" />
            </div>
        </div>
    </div>
    <div class="form-group">
        <button class="btn btn-primary" @onclick="@AddItem">Добавить предмет</button>
        <button class="btn btn-primary" @onclick="@DeleteItem">Убрать предмет</button>
    </div>
    <div class="form-group">
        <button class="btn btn-primary" @onclick="@Submit">Сохранить</button>
        <button class="btn btn-primary" @onclick="@HideForm">Отмена</button>
    </div>
}
@code
{
    [CascadingParameter]
    private List<Quest> Quests { get; set; }

    [CascadingParameter(Name = "BaseApiUrl")] protected string BaseApiUrl { get; set; }

    [Parameter]
    public Action<List<Quest>> OnQuestsChange { get; set; }

    private Quest _questToAdd;
    private bool _showForm;
    private List<Npc> _npcs;
    private string _amountToPrintString = "1";
    private string _itemAmountNeeded = "1";
    private string _itemTechnicalDocument;
    private List<Player> _players;
    private List<Item> _items;
    private List<QuestItem> _selectedItems;
    private QuestItem _selectedItem;
    private List<Player> _selectedPlayers;
    private Player _selectedPlayer;

    protected override async Task OnInitializedAsync()
    {
        _questToAdd = new Quest();
        _npcs = await Http.GetJsonAsync<List<Npc>>($"{BaseApiUrl}/npcs");
        _players = await Http.GetJsonAsync<List<Player>>($"{BaseApiUrl}/players");
        _items = await Http.GetJsonAsync<List<Item>>($"{BaseApiUrl}/items");
        _selectedPlayers = new List<Player>();
        _selectedItems = new List<QuestItem>();
        _selectedItem = new QuestItem();
    }

    private void ShowForm()
    {
        _showForm = true;
        StateHasChanged();
    }

    private void HideForm()
    {
        _showForm = false;
        _questToAdd = new Quest();
        _selectedPlayers = new List<Player>();
        _selectedItems = new List<QuestItem>();
        _selectedItem = new QuestItem();
        StateHasChanged();
    }

    protected async Task Submit()
    {
        if (string.IsNullOrEmpty(_questToAdd.Name))
        {
            var parameters = new ModalParameters();
            parameters.Add("Message", "Имя не может быть пустым.");

            Modal.Show<Notification>("Notification", parameters);
        }
        else if (_questToAdd.QuestGiverId < 1 || !_npcs.Exists(x => x.Id == _questToAdd.QuestEndingId))
        {
            var parameters = new ModalParameters();
            parameters.Add("Message", "Укажите кто выдает квест.");

            Modal.Show<Notification>("Notification", parameters);
        }
        else if (_questToAdd.QuestEndingId < 1 || !_npcs.Exists(x => x.Id == _questToAdd.QuestEndingId))
        {
            var parameters = new ModalParameters();
            parameters.Add("Message", "Укажите кто принимает квест.");

            Modal.Show<Notification>("Notification", parameters);
        }
        else if (_selectedPlayers.Select(x => x.Id).Distinct().Count() < _selectedPlayers.Count)
        {
            var parameters = new ModalParameters();
            parameters.Add("Message", "Нельзя выбирать повторяющихся игроков.");

            Modal.Show<Notification>("Notification", parameters);
        }
        else if (_selectedItems.Select(x => x.ItemId).Distinct().Count() < _selectedItems.Count)
        {
            var parameters = new ModalParameters();
            parameters.Add("Message", "Нельзя выбирать повторяющиеся предметы.");

            Modal.Show<Notification>("Notification", parameters);
        }
        else if (!int.TryParse(_amountToPrintString, out int result) || result < 1)
        {
            var parameters = new ModalParameters();
            parameters.Add("Message", "Введите нормальное число копий. Будьте людьми то.");

            Modal.Show<Notification>("Notification", parameters);
        }
        else
        {
            _questToAdd.AmountToPrint = int.Parse(_amountToPrintString);
            var requestMessage = new HttpRequestMessage()
            {
                Method = new HttpMethod("POST"),
                RequestUri = new Uri($"{BaseApiUrl}/quests"),
                Content =
                    new StringContent(JsonConvert.SerializeObject(_questToAdd)),
            };

            requestMessage.Content.Headers.ContentType =
                new System.Net.Http.Headers.MediaTypeHeaderValue(
                    "application/json");

            var response = await Http.SendAsync(requestMessage);
            if (response.IsSuccessStatusCode)
            {
                var jsonTask = response.Content.ReadAsStringAsync();
                jsonTask.Wait();
                _questToAdd = JsonConvert.DeserializeObject<Quest>(jsonTask.Result);
                foreach (var player in _selectedPlayers)
                {
                    var questPlayer = new QuestPlayer
                    {
                        PlayerId = player.Id,
                        QuestId = _questToAdd.Id,
                    };
                    await Http.PostJsonAsync<QuestPlayer>($"{BaseApiUrl}/questPlayers", questPlayer);
                }
                foreach (var item in _selectedItems)
                {
                    var questItem = new QuestItem
                    {
                        AmountNeeded = item.AmountNeeded,
                        QuestId = _questToAdd.Id,
                        StartingNpcId = item.StartingNpcId,
                        ItemId = item.ItemId,
                    };
                    await Http.PostJsonAsync<QuestItem>($"{BaseApiUrl}/questItems", questItem);
                }
                ChangeQuests();
                _questToAdd = new Quest();
                _selectedPlayer = new Player();
                _selectedPlayers = new List<Player>();
                _showForm = false;
                StateHasChanged();
            }

            if (response.StatusCode == HttpStatusCode.Conflict)
            {
                var parameters = new ModalParameters();
                parameters.Add("Message", "Квест с таким именем уже существует.");

                Modal.Show<Notification>("Notification", parameters);
            }
        }
    }

    private void ChangeQuests()
    {
        Quests.Add(_questToAdd);
        OnQuestsChange?.Invoke(Quests);
    }

    private void SelectPlayer(string playerName)
    {
        _selectedPlayer = _players.FirstOrDefault(x => x.Name == playerName);
    }

    private void SelectQuestGiver(string questGiverName)
    {
        _questToAdd.QuestGiverId = _npcs.First(x => x.Name == questGiverName).Id;
    }

    private void SelectQuestEnding(string questEndingName)
    {
        _questToAdd.QuestEndingId = _npcs.First(x => x.Name == questEndingName).Id;
    }

    private void AddPlayer()
    {
        if (_selectedPlayer != null && _selectedPlayer.Id > 0)
        {
            _selectedPlayers.Add(new Player
            {
                Id = _selectedPlayer.Id,
                Name = _selectedPlayer.Name,
            });
            _selectedPlayer = new Player();
            StateHasChanged();
        }
    }

    private void DeletePlayer()
    {
        if (_selectedPlayers != null && _selectedPlayers.Count > 0)
        {
            _selectedPlayers.RemoveAt(_selectedPlayers.Count - 1);
            StateHasChanged();
        }
    }

    private void SelectItem(string itemName)
    {
        var item = _items.First(x => x.Name == itemName);
        _selectedItem.ItemId = item.Id;
        _selectedItem.Item = new Item
        {
            Name = item.Name,
        };
    }

    private void AddItem()
    {
        if (!int.TryParse(_itemAmountNeeded, out int result))
        {
            var parameters = new ModalParameters();
            parameters.Add("Message", "Укажите количество предметов.");

            Modal.Show<Notification>("Notification", parameters);
        }
        else if (_selectedItem != null && _selectedItem.ItemId > 0 && _selectedItem.StartingNpcId > 0 && int.Parse(_itemAmountNeeded) > 0)
        {
            _selectedItem.AmountNeeded = int.Parse(_itemAmountNeeded);
            _selectedItems.Add(new QuestItem
            {
                AmountNeeded = _selectedItem.AmountNeeded,
                ItemId = _selectedItem.ItemId,
                Item = _selectedItem.Item,
                StartingNpc = _selectedItem.StartingNpc,
                StartingNpcId = _selectedItem.StartingNpcId,
                TechnicalDocumentForNpc = _itemTechnicalDocument,
            });
            _selectedItem = new QuestItem();
            _itemAmountNeeded = "1";
            StateHasChanged();
        }
    }

    private void DeleteItem()
    {
        if (_selectedItems != null && _selectedItems.Count > 0)
        {
            _selectedItems.RemoveAt(_selectedItems.Count - 1);
            StateHasChanged();
        }
    }

    private void SelectNpcForItem(string npcName)
    {
        var npc = _npcs.First(x => x.Name == npcName);
        _selectedItem.StartingNpcId = npc.Id;
        _selectedItem.StartingNpc = npc;
    }

    private string GetStringComplexityValue(int complexity)
    {
        var enumValue = (QuestComplexity)complexity;
        return enumValue.GetStringValue();
    }

    private string GetStringGradeValue(int grade)
    {
        var enumValue = (QuestGrade)grade;
        return enumValue.GetStringValue();
    }
}
