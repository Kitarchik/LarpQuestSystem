@using LarpQuestSystem.Data.Model
@using LarpQuestSystem.Data.Model.QuestSystem
@using LarpQuestSystem.Data.Model.Utilities
@inject HttpClient Http
@inject NavigationManager NavigationManager

<div class="row">
    <div class="col-sm">
        <input type="text" id="filterByName" @bind-value="@NameFilter" @bind-value:event="oninput" placeholder="Название квеста" />
    </div>
    <div class="row col-sm">
        <div class="col-sm my-auto">
            <em>Художественный текст: </em>
        </div>
        <div class="row col-sm">
            <select id="artisticFilter" size="3" @bind-value="@ArtisticFilter" @bind-value:event="oninput">
                <option value=0>Все</option>
                <option value=1>Готовые</option>
                <option value=2>Не готовые</option>
            </select>
        </div>
    </div>
    <div class="row col-sm">
        <div class="col-sm my-auto">
            <em>Технический документ: </em>
        </div>
        <div class="row col-sm">
            <select id="technicalFilter" size="3" @bind-value="@TechnicalFilter" @bind-value:event="oninput">
                <option value=0>Все</option>
                <option value=1>Готовые</option>
                <option value=2>Не готовые</option>
            </select>
        </div>
    </div>
    <div class="row col-sm">
        <div class="col-sm my-auto">
            <em>Готовность по печати: </em>
        </div>
        <div class="row col-sm">
            <select id="printFilter" size="3" @bind-value="@PrintFilter" @bind-value:event="oninput">
                <option value=0>Все</option>
                <option value=1>Готовые</option>
                <option value=2>Не готовые</option>
            </select>
        </div>
    </div>
</div>
<table class="table">
    <thead>
        <tr>
            <th>Название квеста</th>
            <th>Сюжетный текст</th>
            <th>Технический текст</th>
            <th>Напечатан</th>
            <th>Сложность</th>
            <th>Градация</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var quest in _filteredQuest)
        {
            <tr @onclick="(() => NavigateToQuestView(quest.Id))">
                <td>@quest.Name</td>
                <td>
                    @if (quest.IsArtisticTextReady)
                    {
                        <span class="oi oi-check" aria-hidden="true"></span>
                    }
                    else
                    {
                        <span class="oi oi-ban" aria-hidden="true"></span>
                    }
                </td>
                <td>
                    @if (quest.IsTechnicalDescriptionReady)
                    {
                        <span class="oi oi-check" aria-hidden="true"></span>
                    }
                    else
                    {
                        <span class="oi oi-ban" aria-hidden="true"></span>
                    }
                </td>
                <td>
                    @if (quest.IsPrinted)
                    {
                        <span class="oi oi-check" aria-hidden="true"></span>
                    }
                    else
                    {
                        <span class="oi oi-ban" aria-hidden="true"></span>
                    }
                </td>
                <td>@GetComplexity(quest.Complexity)</td>
                <td>@GetGrade(quest.Grade)</td>
            </tr>
        }
    </tbody>
</table>

@code
{
    private List<Quest> _filteredQuest;
    private string _nameFilter = string.Empty;
    private int _artisticFilter;
    private int _technicalFilter;
    private int _printFilter;

    [CascadingParameter]
    private List<Quest> Quests { get; set; }

    public string NameFilter
    {
        get => _nameFilter;
        set
        {
            _nameFilter = value;
            FilterQuests();
        }
    }

    public int ArtisticFilter
    {
        get => _artisticFilter;
        set
        {
            _artisticFilter = value;
            FilterQuests();
        }
    }

    public int TechnicalFilter
    {
        get => _technicalFilter;
        set
        {
            _technicalFilter = value;
            FilterQuests();
        }
    }

    public int PrintFilter
    {
        get => _printFilter;
        set
        {
            _printFilter = value;
            FilterQuests();
        }
    }

    protected override Task OnParametersSetAsync()
    {
        _filteredQuest = Quests;
        return base.OnParametersSetAsync();
    }

    private void FilterQuests()
    {
        _filteredQuest = Quests
            .Where(x => x.Name.Contains(_nameFilter, StringComparison.OrdinalIgnoreCase))
            .Where(x => (ArtisticFilter == 0) || (x.IsArtisticTextReady == (ArtisticFilter == 1)))
            .Where(x => (TechnicalFilter == 0) || (x.IsTechnicalDescriptionReady == (TechnicalFilter == 1)))
            .Where(x => (PrintFilter == 0) || (x.IsPrinted == (PrintFilter == 1)))
            .ToList();
        StateHasChanged();
    }

    private void NavigateToQuestView(int questId)
    {
        NavigationManager.NavigateTo($"/quests/{questId}");
    }

    private string GetComplexity(int complexity)
    {
        var enumValue = (QuestComplexity)complexity;
        return enumValue.GetStringValue();
    }

    private string GetGrade(int grade)
    {
        var enumValue = (QuestGrade)grade;
        return enumValue.GetStringValue();
    }

}