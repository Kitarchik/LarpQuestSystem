@page "/locations/{LocationId:int}"
@using LarpQuestSystem.Data.Model
@using LarpQuestSystem.WebApp.Components

@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IModalService Modal

<h1>Локация</h1>

@if (_location == null)
{
    <p><em>@_message</em></p>
}
else
{
    <p><em>Название: @_location.Name</em></p>
    <p><em>Описание: @_location.Description</em></p>
    <div style="margin-bottom: 10px">
        <button class="btn btn-primary" @onclick="EditLocation">Редактировать локацию</button>
        <button class="btn btn-primary" @onclick="@DeleteLocation">Удалить локацию</button>
    </div>
    if (_location.Npcs.Any())
    {
        <br/>
        <br/>
        <hr/>
        <CascadingValue Value=@_npcs>
            <NpcsShortTable />
        </CascadingValue>
    }
}

@code {
    private string _message = "Загрузка...";
    private Location _location;
    private List<Npc> _npcs { get; set; }

    [Parameter]
    public int LocationId { get; set; }

    [CascadingParameter(Name = "BaseApiUrl")] 
    protected string BaseApiUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _location = await Http.GetJsonAsync<Location>($"{BaseApiUrl}/locations/{LocationId}");
        _npcs = _location.Npcs.ToList();
    }

    private async Task DeleteLocation()
    {
        if (_location.Npcs.Any())
        {
            var parameters = new ModalParameters();
            parameters.Add("Message", "А как же НПС, живущие в этой локации? Удалите сначала их.");

            Modal.Show<Notification>("Notification", parameters);
        }
        else
        {
            var response = await Http.DeleteAsync($"{BaseApiUrl}/locations/{LocationId}");
            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/locations");
            }
            else
            {
                var parameters = new ModalParameters();
                parameters.Add("Message", "Что-то пошло не так.");

                Modal.Show<Notification>("Notification", parameters);
            }
        }
    }

    private void EditLocation()
    {
        NavigationManager.NavigateTo($"/locations/edit/{LocationId}");
    }

    private void NavigateToNpcView(int npcId)
    {
        NavigationManager.NavigateTo($"/npcs/{npcId}");
    }
}