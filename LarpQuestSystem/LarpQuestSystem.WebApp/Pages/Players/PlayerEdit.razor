@page "/players/edit/{PlayerId:int}"
@using LarpQuestSystem.Data.Model
@using LarpQuestSystem.WebApp.Components.Utils

@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IModalService Modal

<h1>Редактировать игрока</h1>

@if (_player == null)
{
    <p><em>@_message</em></p>
}
else
{
    <div class="form-group row">
        <label for="txtPlayerName" class="col-sm-2 col-form-label">Имя игрока</label>
        <div class="col-sm-10">
            <input type="text" id="txtPlayerName" class="form-control" @bind="@_player.Name" />
        </div>
    </div>
    <div class="form-group row">
        <label for="txtPlayerDescription" class="col-sm-2 col-form-label">Описание</label>
        <div class="col-sm-10">
            <textarea class="form-control" id="txtPlayerDescription" rows="5" @bind="@_player.Description"></textarea>
        </div>
    </div>
    <div class="form-group row">
        <label class="col-sm-2 col-form-label">Выберите локацию: </label>
        <FilterItems Items="@_locations.Select(x=>x.Name).ToList()" SelectedItem="@_playerView.Location.Name" OnItemSelect="@SelectLocation" />
    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-primary">Сохранить</button>
        <button class="btn btn-primary" @onclick="Cancel">Отмена</button>
    </div>
}

@code {
    private string _message = "Загрузка...";
    private PlayerInfoView _playerView;
    private Player _player;
    private List<Player> _players;
    private List<Location> _locations;

    [Parameter]
    public int PlayerId { get; set; }

    [CascadingParameter(Name = "BaseApiUrl")] protected string BaseApiUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _players = await Http.GetJsonAsync<List<Player>>($"{BaseApiUrl}/players");
        _locations = await Http.GetJsonAsync<List<Location>>($"{BaseApiUrl}/locations");
        _playerView = await Http.GetJsonAsync<PlayerInfoView>($"{BaseApiUrl}/players/{PlayerId}");
        _player = _playerView.Player;
    }

    private void SelectLocation(string locationName)
    {
        _player.LocationId = _locations.First(x => x.Name == locationName).Id;
    }

    protected async Task Submit()
    {
        if (_players.Any(x => x.Name == _player.Name && x.Id != _player.Id))
        {
            var parameters = new ModalParameters();
            parameters.Add("Message", "Игрок с таким именем уже существует.");

            Modal.Show<Notification>("Notification", parameters);
        }
        else if (string.IsNullOrEmpty(_player.Name))
        {
            var parameters = new ModalParameters();
            parameters.Add("Message", "Имя не может быть пустым.");

            Modal.Show<Notification>("Notification", parameters);
        }
        else if (_locations.All(x => x.Id != _player.LocationId))
        {
            var parameters = new ModalParameters();
            parameters.Add("Message", "Выберите локацию.");

            Modal.Show<Notification>("Notification", parameters);
        }
        else
        {
            _player.Location = null;
            await Http.PutJsonAsync<Player>($"{BaseApiUrl}/players", _player);
            NavigationManager.NavigateTo($"/players/{PlayerId}");
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo($"/players/{PlayerId}");
    }
}