@page "/players/edit/{PlayerId:int}"
@using LarpQuestSystem.Data.Model
@using LarpQuestSystem.WebApp.Components.Utils

@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IModalService Modal

<h1>Редактировать игрока</h1>

@if (_player == null)
{
    <p><em>@_message</em></p>
}
else
{
    <EditForm Model="@_player" OnValidSubmit="@Submit">
        <DataAnnotationsValidator></DataAnnotationsValidator>

        <div class="form-group row">
            <label for="txtPlayerName" class="col-sm-2 col-form-label">Имя игрока</label>
            <div class="col-sm-10">
                <InputText id="txtPlayerName" class="form-control" @bind-Value="@_player.Name"></InputText>
                <ValidationMessage For="@(() => _player.Name)"></ValidationMessage>
            </div>
        </div>
        <div class="form-group row">
            <label for="txtPlayerDescription" class="col-sm-2 col-form-label">Описание</label>
            <div class="col-sm-10">
                <textarea class="form-control" id="txtPlayerDescription" rows="5" @bind="@_player.Description"></textarea>
            </div>
        </div>
        <div class="form-group row">
            <label for="txtLocationFilter" class="col-sm-2 col-form-label">Фильтр локаций: </label>
            <div class="col-sm-10">
                <input type="text" id="txtLocationFilter" @bind-value="@LocationFilter" @bind-value:event="oninput" placeholder="Название локации" />
            </div>
        </div>
        <div class="form-group row">
            <label for="txtNpcLocation" class="col-sm-2 col-form-label">Локация</label>
            <div class="col-sm-10">
                <select id="txtNpcLocation" size="5" @bind="@_player.LocationId">
                    @foreach (var location in _filteredLocations)
                    {
                        <option value="@location.Id">@location.Name</option>
                    }
                </select>
            </div>
        </div>
        <div class="form-group">
            <button type="submit" class="btn btn-primary">Сохранить</button>
            <button class="btn btn-primary" @onclick="Cancel">Отмена</button>
        </div>
    </EditForm>
}

@code {
    private string _message = "Загрузка...";
    private Player _player;
    private List<Player> _players;
    private List<Location> _locations;
    private List<Location> _filteredLocations { get; set; }
    private string _locationFilter = string.Empty;

    [Parameter]
    public int PlayerId { get; set; }

    [CascadingParameter(Name = "BaseApiUrl")] protected string BaseApiUrl { get; set; }

    public string LocationFilter
    {
        get => _locationFilter;
        set
        {
            _locationFilter = value;
            FilterLocations();
        }
    }

    private void FilterLocations()
    {
        _filteredLocations = _locations
            .Where(x => x.Name.Contains(LocationFilter, StringComparison.OrdinalIgnoreCase))
            .ToList();
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        _players = await Http.GetJsonAsync<List<Player>>($"{BaseApiUrl}/players");
        _locations = await Http.GetJsonAsync<List<Location>>($"{BaseApiUrl}/locations");
        _filteredLocations = _locations;
        _player = _players.FirstOrDefault(x => x.Id == PlayerId);

    }

    protected async Task Submit()
    {
        if (_players.Any(x => x.Name == _player.Name && x.Id != _player.Id))
        {
            var parameters = new ModalParameters();
            parameters.Add("Message", "Игрок с таким именем уже существует.");

            Modal.Show<Notification>("Notification", parameters);
        }
        else if (string.IsNullOrEmpty(_player.Name))
        {
            var parameters = new ModalParameters();
            parameters.Add("Message", "Имя не может быть пустым.");

            Modal.Show<Notification>("Notification", parameters);
        }
        else if (_locations.All(x => x.Id != _player.LocationId))
        {
            var parameters = new ModalParameters();
            parameters.Add("Message", "Выберите локацию.");

            Modal.Show<Notification>("Notification", parameters);
        }
        else
        {
            await Http.PutJsonAsync<Location>($"{BaseApiUrl}/players", _player);
            NavigationManager.NavigateTo($"/players/{PlayerId}");
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo($"/players/{PlayerId}");
    }
}