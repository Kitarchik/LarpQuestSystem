@page "/items/{ItemId:int}"
@attribute [Authorize(Policy = Policies.IsScriptWriter)]
@using LarpQuestSystem.Data.Model
@using LarpQuestSystem.Data.Model.QuestSystem
@using LarpQuestSystem.Data.Model.Security
@using LarpQuestSystem.Data.Model.Utilities
@using LarpQuestSystem.WebApp.Components.Utils
@using LarpQuestSystem.WebApp.Components.Items

@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IModalService Modal

<h1>Квестовый предмет</h1>

@if (_item == null)
{
    <p><em>@_message</em></p>
}
else
{
    <p><em>Название: @_item.Item.Name</em></p>
    <p><em>Описание: @_item.Item.Description</em></p>
    <p><em>Количество готовых предметов: @_item.Item.AmountReady</em></p>
    <p><em>Тип предмета: @GetItemType(_item.Item.ItemType)</em></p>
    <AuthorizeView Policy="@Policies.IsAdmin">
        <div style="margin-bottom: 10px">
            <button class="btn btn-primary" @onclick="@EditItem">Редактировать предмет</button>
            <button class="btn btn-primary" @onclick="@DeleteItem">Удалить предмет</button>
        </div>
    </AuthorizeView>
    <CascadingValue Value=@_item.QuestItems.ToList()>
        <br />
        <br />
        <hr />
        <h2>Таблица квестов, в которых участвует предмет</h2>
        <ItemQuestTable />
    </CascadingValue>
}

@code
{
    private string _message = "Загрузка...";
    private ItemInfoView _item;

    [Parameter]
    public int ItemId { get; set; }

    [CascadingParameter(Name = "BaseApiUrl")] protected string BaseApiUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _item = await Http.GetJsonAsync<ItemInfoView>($"{BaseApiUrl}/items/{ItemId}");
    }

    private async Task DeleteItem()
    {
        if (_item.QuestItems.Any())
        {
            var parameters = new ModalParameters();
            parameters.Add("Message", "Этот предмет участвует в квестах! Удалите сначала их.");

            Modal.Show<Notification>("Notification", parameters);
        }
        var response = await Http.DeleteAsync($"{BaseApiUrl}/items/{ItemId}");
        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/items");
        }
        else
        {
            var parameters = new ModalParameters();
            parameters.Add("Message", "Что-то пошло не так.");

            Modal.Show<Notification>("Notification", parameters);
        }
    }

    private string GetItemType(int itemType)
    {
        var enumValue = (ItemType)itemType;
        return enumValue.GetStringValue();
    }

    private void EditItem()
    {
        NavigationManager.NavigateTo($"/items/edit/{ItemId}");
    }
}
