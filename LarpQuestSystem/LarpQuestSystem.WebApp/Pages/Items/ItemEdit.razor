@page "/items/edit/{ItemId:int}"
@attribute [Authorize(Policy = Policies.IsAdmin)]
@using LarpQuestSystem.Data.Model
@using LarpQuestSystem.Data.Model.QuestSystem
@using LarpQuestSystem.Data.Model.Security
@using LarpQuestSystem.Data.Model.Utilities
@using LarpQuestSystem.WebApp.Components.Utils

@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IModalService Modal


<h1>Редактировать квестовый предмет</h1>

@if (_itemView == null)
{
    <p><em>@_message</em></p>
}
else
{
    <EditForm Model="@_item" OnValidSubmit="@Submit">
        <DataAnnotationsValidator></DataAnnotationsValidator>

        <div class="form-group row">
            <label for="txtItemName" class="col-sm-2 col-form-label">Имя НПС</label>
            <div class="col-sm-10">
                <InputText id="txtItemName" class="form-control" @bind-Value="@_item.Name"></InputText>
                <ValidationMessage For="@(() => _item.Name)"></ValidationMessage>
            </div>
        </div>
        <div class="form-group row">
            <label for="txtItemDescription" class="col-sm-2 col-form-label">Описание</label>
            <div class="col-sm-10">
                <textarea class="form-control" id="txtItemDescription" rows="5" @bind="@_item.Description"></textarea>
            </div>
        </div>
        <div class="form-group row">
            <label for="txtAmountReady" class="col-sm-2 col-form-label">Количество готовых предметов</label>
            <div class="col-sm-10">
                <input type="text" id="txtAmountReady" class="form-control" @bind="@_amountReadyString" />
            </div>
        </div>
        <div class="form-group row">
            <label for="itemType" class="col-sm-2 col-form-label">Тип предмета</label>
            <div class="col-sm-10">
                <select id="itemType" @bind="@_item.ItemType">
                    @foreach (int itemType in Enum.GetValues(typeof(ItemType)))
                    {
                        <option value="@itemType">@GetStringItemTypeValue(itemType)</option>
                    }
                </select>
            </div>
        </div>
        <div class="form-group">
            <button type="submit" class="btn btn-primary">Сохранить</button>
            <button class="btn btn-primary" @onclick="Cancel">Отмена</button>
        </div>
    </EditForm>
}

@code {
    private string _message = "Загрузка...";
    private string _amountReadyString;
    private ItemInfoView _itemView;
    private Item _item;
    private List<Item> _items;

    [Parameter]
    public int ItemId { get; set; }

    [CascadingParameter(Name = "BaseApiUrl")] protected string BaseApiUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _items = await Http.GetJsonAsync<List<Item>>($"{BaseApiUrl}/items");
        _itemView = await Http.GetJsonAsync<ItemInfoView>($"{BaseApiUrl}/items/{ItemId}");
        _item = _itemView.Item;
        _amountReadyString = _item.AmountReady.ToString();
    }

    protected async Task Submit()
    {
        if (_items.Any(x => x.Name == _item.Name && x.Id != _item.Id))
        {
            var parameters = new ModalParameters();
            parameters.Add("Message", "Предмет с таким именем уже существует.");

            Modal.Show<Notification>("Notification", parameters);
        }
        else if (string.IsNullOrEmpty(_item.Name))
        {
            var parameters = new ModalParameters();
            parameters.Add("Message", "Имя не может быть пустым.");

            Modal.Show<Notification>("Notification", parameters);
        }
        else if (!int.TryParse(_amountReadyString, out int result) || result < 1)
        {
            var parameters = new ModalParameters();
            parameters.Add("Message", "Введите нормальное количество готовых предметов. Будьте людьми то.");

            Modal.Show<Notification>("Notification", parameters);
        }
        else
        {
            _item.AmountReady = int.Parse(_amountReadyString);
            await Http.PutJsonAsync<Item>($"{BaseApiUrl}/items", _item);
            NavigationManager.NavigateTo($"/items/{ItemId}");
        }
    }

    private string GetStringItemTypeValue(int itemType)
    {
        var enumValue = (ItemType)itemType;
        return enumValue.GetStringValue();
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo($"/items/{ItemId}");
    }
}
