@page "/npcs/{NpcId:int}"
@using LarpQuestSystem.Data.Model
@using LarpQuestSystem.WebApp.Components.Utils
@using LarpQuestSystem.WebApp.Components.Quests
@using LarpQuestSystem.WebApp.Components.Items

@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IModalService Modal

<AuthorizeView Policy="@Policies.IsScriptWriter">
    <h1>НПС</h1>

    @if (_npc == null)
    {
        <p><em>@_message</em></p>
    }
    else
    {
        <p>Имя: @Npc.Name</p>
        <p>Описание: @Npc.Description</p>
        <p>Локация: <button class="btn btn-primary" @onclick="(() => NavigateToLocationView(_npc.Location.Id))">@_npc.Location.Name</button></p>
        <AuthorizeView Policy="@Policies.IsAdmin">
            <div style="margin-bottom: 10px">
                <button class="btn btn-primary" @onclick="@EditNpc">Редактировать НПС</button>
                <button class="btn btn-primary" @onclick="@DeleteNpc">Удалить НПС</button>
            </div>
        </AuthorizeView>
        if (StartingQuests.Any())
        {
            <br />
            <br />
            <hr />
            <h2>Список выдаваемых квестов <button class="btn btn-primary" @onclick="@ToggleStartingQuestsTable">@(!_hideStartingQuestTable ? "Скрыть" : "Показать")</button> </h2>
            @if (!_hideStartingQuestTable)
            {
                <CascadingValue Value=@StartingQuests>
                    <QuestsShortTable />
                </CascadingValue>
            }
        }
        if (EndingQuests.Any())
        {
            <br />
            <br />
            <hr />
            <h2>Список завершаемых квестов <button class="btn btn-primary" @onclick="@ToggleEndingQuestsTable">@(!_hideEndingQuestTable ? "Скрыть" : "Показать")</button> </h2>
            @if (!_hideEndingQuestTable)
            {
                <CascadingValue Value=@EndingQuests>
                    <QuestsShortTable />
                </CascadingValue>
            }
        }
        if (ItemsOnStart.Any())
        {
            <br />
            <br />
            <hr />
            <h2>Список квестовых предметов на старте <button class="btn btn-primary" @onclick="@ToggleItemsOnStartTable">@(!_hideItemsOnStartTable ? "Скрыть" : "Показать")</button> </h2>
            @if (!_hideItemsOnStartTable)
            {
                <CascadingValue Value=@ItemsOnStart>
                    <ItemQuestTable />
                </CascadingValue>
            }
        }
    }
</AuthorizeView>

@code {
    private string _message = "Загрузка...";
    private NpcInfoView _npc;
    private Npc Npc { get; set; }
    private List<Quest> StartingQuests { get; set; }
    private List<Quest> EndingQuests { get; set; }
    private List<QuestItem> ItemsOnStart { get; set; }
    private bool _hideStartingQuestTable;
    private bool _hideEndingQuestTable;
    private bool _hideItemsOnStartTable;

    [Parameter]
    public int NpcId { get; set; }

    [CascadingParameter(Name = "BaseApiUrl")] protected string BaseApiUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _npc = await Http.GetJsonAsync<NpcInfoView>($"{BaseApiUrl}/npcs/{NpcId}");
        StartingQuests = _npc.StartingQuests;
        EndingQuests = _npc.EndingQuests;
        ItemsOnStart = _npc.QuestItems;
        Npc = _npc.Npc;
        _hideStartingQuestTable = false;
        _hideEndingQuestTable = false;
        _hideItemsOnStartTable = false;
    }

    private async Task DeleteNpc()
    {
        if (StartingQuests.Any() || EndingQuests.Any() || ItemsOnStart.Any())
        {
            var parameters = new ModalParameters();
            parameters.Add("Message", "ЭЭЭ! Он же квестами и предметами занимается! Удали сначала их.");

            Modal.Show<Notification>("Notification", parameters);
        }
        else
        {
            var response = await Http.DeleteAsync($"{BaseApiUrl}/npcs/{NpcId}");
            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/npcs");
            }
            else
            {
                var parameters = new ModalParameters();
                parameters.Add("Message", "Что-то пошло не так.");

                Modal.Show<Notification>("Notification", parameters);
            }
        }
    }

    private void EditNpc()
    {
        NavigationManager.NavigateTo($"/npcs/edit/{NpcId}");
    }

    private void NavigateToLocationView(int locationId)
    {
        NavigationManager.NavigateTo($"/locations/{locationId}");
    }

    private void ToggleStartingQuestsTable()
    {
        _hideStartingQuestTable = !_hideStartingQuestTable;
        StateHasChanged();
    }

    private void ToggleEndingQuestsTable()
    {
        _hideEndingQuestTable = !_hideEndingQuestTable;
        StateHasChanged();
    }

    private void ToggleItemsOnStartTable()
    {
        _hideItemsOnStartTable = !_hideItemsOnStartTable;
        StateHasChanged();
    }

}
