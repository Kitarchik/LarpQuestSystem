@page "/npcs/{NpcId:int}"
@using LarpQuestSystem.Data.Model
@using LarpQuestSystem.WebApp.Components.Utils
@using LarpQuestSystem.WebApp.Components.Quests

@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IModalService Modal

<h1>НПС</h1>

@if (_npc == null)
{
    <p><em>@_message</em></p>
}
else
{
    <p><em>Имя: @_npc.Name</em></p>
    <p><em>Описание: @_npc.Description</em></p>
    <p><em>Локация: @_npc.Location.Name</em></p>
    <div style="margin-bottom: 10px">
        <button class="btn btn-primary" @onclick="@EditNpc">Редактировать НПС</button>
        <button class="btn btn-primary" @onclick="@DeleteNpc">Удалить НПС</button>
    </div>
    if (_npc.StartingQuests.Any())
    {
        <br />
        <br />
        <hr />
        <h2>Список выдаваемых квестов <button class="btn btn-primary" @onclick="@ToggleStartingQuestsTable">@(!_hideStartingQuestTable ? "Скрыть" : "Показать")</button> </h2>
        @if (!_hideStartingQuestTable)
        {
            <CascadingValue Value=@StartingQuests>
                <QuestsShortTable />
            </CascadingValue>
        }
    }
    if (_npc.EndingQuests.Any())
    {
        <br />
        <br />
        <hr />
        <h2>Список завершаемых квестов <button class="btn btn-primary" @onclick="@ToggleEndingQuestsTable">@(!_hideEndingQuestTable ? "Скрыть" : "Показать")</button> </h2>
        @if (!_hideEndingQuestTable)
        {
            <CascadingValue Value=@EndingQuests>
                <QuestsShortTable />
            </CascadingValue>
        }
    }
}

@code {
    private string _message = "Загрузка...";
    private Npc _npc;
    private List<Quest> StartingQuests { get; set; }
    private List<Quest> EndingQuests { get; set; }
    private bool _hideStartingQuestTable;
    private bool _hideEndingQuestTable;

    [Parameter]
    public int NpcId { get; set; }

    [CascadingParameter(Name = "BaseApiUrl")] protected string BaseApiUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _npc = await Http.GetJsonAsync<Npc>($"{BaseApiUrl}/npcs/{NpcId}");
        StartingQuests = _npc.StartingQuests.ToList();
        EndingQuests = _npc.EndingQuests.ToList();
        _hideStartingQuestTable = false;
        _hideEndingQuestTable = false;
    }

    private async Task DeleteNpc()
    {
        if (_npc.StartingQuests.Any() || _npc.EndingQuests.Any())
        {
            var parameters = new ModalParameters();
            parameters.Add("Message", "ЭЭЭ! Он же квестами занимается! Удали сначала квесты.");

            Modal.Show<Notification>("Notification", parameters);
        }
        else
        {
            var response = await Http.DeleteAsync($"{BaseApiUrl}/npcs/{NpcId}");
            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/npcs");
            }
            else
            {
                var parameters = new ModalParameters();
                parameters.Add("Message", "Что-то пошло не так.");

                Modal.Show<Notification>("Notification", parameters);
            }
        }
    }

    private void EditNpc()
    {
        NavigationManager.NavigateTo($"/npcs/edit/{NpcId}");
    }

    private void ToggleStartingQuestsTable()
    {
        _hideStartingQuestTable = !_hideStartingQuestTable;
        StateHasChanged();
    }

    private void ToggleEndingQuestsTable()
    {
        _hideEndingQuestTable = !_hideEndingQuestTable;
        StateHasChanged();
    }

}