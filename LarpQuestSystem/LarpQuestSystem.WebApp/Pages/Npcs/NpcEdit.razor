@page "/npcs/edit/{NpcId:int}"
@using LarpQuestSystem.Data.Model
@using LarpQuestSystem.WebApp.Components.Utils

@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IModalService Modal

<h1>Редактировать НПС</h1>

@if (_npc == null)
{
    <p><em>@_message</em></p>
}
else
{
    <div class="form-group row">
        <label for="txtNpcName" class="col-sm-2 col-form-label">Имя НПС</label>
        <div class="col-sm-10">
            <input type="text" id="txtNpcName" class="form-control" @bind="@_npc.Name"/>
        </div>
    </div>
    <div class="form-group row">
        <label for="txtNpcDescription" class="col-sm-2 col-form-label">Описание</label>
        <div class="col-sm-10">
            <textarea class="form-control" id="txtNpcDescription" rows="5" @bind="@_npc.Description"></textarea>
        </div>
    </div>
    <div class="form-group row">
        <label class="col-sm-2 col-form-label">Фильтр локаций: </label>
        <FilterItems Items="@_locations.Select(x=>x.Name).ToList()" SelectedItem="@_locations.First(x=>x.Id==_npc.LocationId).Name" OnItemSelect="@SelectLocation" />
    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-primary">Сохранить</button>
        <button class="btn btn-primary" @onclick="@Cancel">Отмена</button>
    </div>
}

@code {
    private string _message = "Загрузка...";
    private Npc _npc;
    private List<Npc> _npcs;
    private List<Location> _locations;

    [Parameter]
    public int NpcId { get; set; }

    [CascadingParameter(Name = "BaseApiUrl")] protected string BaseApiUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _npcs = await Http.GetJsonAsync<List<Npc>>($"{BaseApiUrl}/npcs");
        _locations = await Http.GetJsonAsync<List<Location>>($"{BaseApiUrl}/locations");
        _npc = _npcs.FirstOrDefault(x => x.Id == NpcId);
    }

    protected async Task Submit()
    {
        if (_npcs.Any(x => x.Name == _npc.Name && x.Id != _npc.Id))
        {
            var parameters = new ModalParameters();
            parameters.Add("Message", "НПС с таким именем уже существует.");

            Modal.Show<Notification>("Notification", parameters);
        }
        else if (string.IsNullOrEmpty(_npc.Name))
        {
            var parameters = new ModalParameters();
            parameters.Add("Message", "Имя не может быть пустым.");

            Modal.Show<Notification>("Notification", parameters);
        }
        else if (_locations.All(x => x.Id != _npc.LocationId))
        {
            var parameters = new ModalParameters();
            parameters.Add("Message", "Выберите локацию.");

            Modal.Show<Notification>("Notification", parameters);
        }
        else
        {
            await Http.PutJsonAsync<Npc>($"{BaseApiUrl}/npcs", _npc);
            NavigationManager.NavigateTo($"/npcs/{NpcId}");
        }
    }

    private void SelectLocation(string locationName)
    {
        _npc.LocationId = _locations.First(x => x.Name == locationName).Id;
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo($"/npcs/{NpcId}");
    }
}