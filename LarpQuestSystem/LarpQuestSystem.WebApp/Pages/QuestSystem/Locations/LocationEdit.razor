@page "/locations/edit/{LocationId:int}"
@attribute [Authorize(Policy = Policies.IsAdmin)]
@using LarpQuestSystem.Data.Model
@using LarpQuestSystem.Data.Model.QuestSystem
@using LarpQuestSystem.Data.Model.Security
@using LarpQuestSystem.WebApp.Components.Utils

@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IModalService Modal

<h1>Редактировать локацию</h1>

@if (_location == null)
{
    <p><em>@_message</em></p>
}
else
{
<EditForm Model="@_location" OnValidSubmit="@Submit">
    <DataAnnotationsValidator></DataAnnotationsValidator>

    <div class="form-group row">
        <label for="txtLocationName" class="col-sm-2 col-form-label">Название локации</label>
        <div class="col-sm-10">
            <InputText id="txtLocationName" class="form-control" @bind-Value="@_location.Name"></InputText>
            <ValidationMessage For="@(() => _location.Name)"></ValidationMessage>
        </div>
    </div>
    <div class="form-group row">
        <label for="txtLocationDescription" class="col-sm-2 col-form-label">Описание</label>
        <div class="col-sm-10">
            <textarea class="form-control" id="txtLocationDescription" rows="5" @bind="@_location.Description"></textarea>
        </div>
    </div>
    <div class="form-group row">
        <label for="txtRequestsPayed" class="col-sm-2 col-form-label">Количество оплаченных заявок</label>
        <div class="col-sm-10">
            <input type="text" id="txtRequestsPayed" class="form-control" @bind="@_requestsPayedString" />
        </div>
    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-primary">Сохранить</button>
        <button class="btn btn-primary" @onclick="Cancel">Отмена</button>
    </div>
</EditForm>
}

@code {
    private string _message = "Загрузка...";
    private string _requestsPayedString;
    private Location _location;
    private List<Location> _locations;

    [Parameter]
    public int LocationId { get; set; }

    [CascadingParameter(Name = "BaseApiUrl")] protected string BaseApiUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _locations = await Http.GetJsonAsync<List<Location>>($"{BaseApiUrl}/locations");
        _location = _locations.FirstOrDefault(x => x.Id == LocationId);
        _requestsPayedString = _location.RequestsPayed.ToString();
    }

    protected async Task Submit()
    {
        if (_locations.Any(x => x.Name == _location.Name && x.Id != _location.Id))
        {
            var parameters = new ModalParameters();
            parameters.Add("Message", "Локация с таким именем уже существует.");

            Modal.Show<Notification>("Notification", parameters);
        }
        else if (string.IsNullOrEmpty(_location.Name))
        {
            var parameters = new ModalParameters();
            parameters.Add("Message", "Имя не может быть пустым.");

            Modal.Show<Notification>("Notification", parameters);
        }
        else if (!int.TryParse(_requestsPayedString, out int result) || result < 0)
        {
            var parameters = new ModalParameters();
            parameters.Add("Message", "Введите нормальное число оплаченных заявок. Будьте людьми то.");

            Modal.Show<Notification>("Notification", parameters);
        }
        else
        {
            _location.RequestsPayed = int.Parse(_requestsPayedString);
            await Http.PutJsonAsync<Location>($"{BaseApiUrl}/locations", _location);
            NavigationManager.NavigateTo($"/locations/{LocationId}");
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo($"/locations/{LocationId}");
    }
}
