@page "/locations"
@attribute [Authorize(Policy = Policies.IsScriptWriter)]
@using LarpQuestSystem.Data.Model.QuestSystem
@using LarpQuestSystem.Data.Model.Security
@using LarpQuestSystem.WebApp.Components.QuestSystem.Locations

@inject HttpClient Http
@inject NavigationManager NavigationManager

<h1>Локации игры</h1>

@if (_locations == null)
{
    <p><em>@_message</em></p>
}
else
{
    <CascadingValue Value=@_locations>
        <AuthorizeView Policy="@Policies.IsAdmin">
            <LocationsAddForm OnLocationsChange="ChangeLocations" />
            <br />
            <br />
            <hr />
        </AuthorizeView>
        <h2>Таблица локаций</h2>
        <LocationsTable />
    </CascadingValue>
}

@code {

    [CascadingParameter(Name = "BaseApiUrl")] protected string BaseApiUrl { get; set; }

    private List<Location> _locations { get; set; }
    private string _message = "Загрузка...";

    protected override async Task OnInitializedAsync()
    {
        _locations = await Http.GetJsonAsync<List<Location>>($"{BaseApiUrl}/locations");
    }

    private void ChangeLocations(List<Location> locations)
    {
        _locations = locations;
        StateHasChanged();
    }
}
