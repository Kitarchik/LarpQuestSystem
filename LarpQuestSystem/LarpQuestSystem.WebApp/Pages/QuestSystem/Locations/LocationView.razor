@page "/locations/{LocationId:int}"
@attribute [Authorize(Policy = Policies.IsScriptWriter)]
@using LarpQuestSystem.Data.Model.QuestSystem
@using LarpQuestSystem.Data.Model.Security
@using LarpQuestSystem.WebApp.Components.Utils
@using LarpQuestSystem.WebApp.Components.QuestSystem.Npcs
@using LarpQuestSystem.WebApp.Components.QuestSystem.Players

@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IModalService Modal

<h1>Локация</h1>

@if (_location == null)
{
    <p><em>@_message</em></p>
}
else
{
    <p><em>Название: @_location.Location.Name</em></p>
    <p><em>Описание: @_location.Location.Description</em></p>
    <p><em>Заявок оплачено: @_location.Location.RequestsPayed</em></p>
    <AuthorizeView Policy="@Policies.IsAdmin">
        <div style="margin-bottom: 10px">
            <button class="btn btn-primary" @onclick="@EditLocation">Редактировать локацию</button>
            <button class="btn btn-primary" @onclick="@DeleteLocation">Удалить локацию</button>
        </div>
    </AuthorizeView>
    if (_location.Npcs.Any())
    {
        <br />
        <br />
        <hr />
        <h2>Список НПС локации <button class="btn btn-primary" @onclick="@ToggleNpcsTable">@(!_hideNpcsTable ? "Скрыть" : "Показать")</button> </h2>
        @if (!_hideNpcsTable)
        {
            <CascadingValue Value=@_npcs>
                <NpcsShortTable />
            </CascadingValue>
        }
    }
    if (_location.Players.Any())
    {
        <br />
        <br />
        <hr />
        <h2>Список игроков локации <button class="btn btn-primary" @onclick="@TogglePlayersTable">@(!_hidePlayersTable ? "Скрыть" : "Показать")</button> </h2>
        @if (!_hideNpcsTable)
        {
            <CascadingValue Value=@_players>
                <PlayersTable />
            </CascadingValue>
        }
    }
}

@code {
    private string _message = "Загрузка...";
    private LocationInfoView _location;
    private List<Npc> _npcs { get; set; }
    private List<Player> _players { get; set; }
    private bool _hideNpcsTable;
    private bool _hidePlayersTable;

    [Parameter]
    public int LocationId { get; set; }

    [CascadingParameter(Name = "BaseApiUrl")]
    protected string BaseApiUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _location = await Http.GetJsonAsync<LocationInfoView>($"{BaseApiUrl}/locations/{LocationId}");
        _npcs = _location.Npcs.ToList();
        _players = _location.Players.ToList();
        _hideNpcsTable = false;
        _hidePlayersTable = false;
    }

    private async Task DeleteLocation()
    {
        if (_location.Npcs.Any())
        {
            var parameters = new ModalParameters();
            parameters.Add("Message", "А как же НПС, живущие в этой локации? Удалите сначала их.");

            Modal.Show<Notification>("Notification", parameters);
        }
        if (_location.Players.Any())
        {
            var parameters = new ModalParameters();
            parameters.Add("Message", "А как же игроки, живущие в этой локации? Удалите сначала их.");

            Modal.Show<Notification>("Notification", parameters);
        }
        else
        {
            var response = await Http.DeleteAsync($"{BaseApiUrl}/locations/{LocationId}");
            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/locations");
            }
            else
            {
                var parameters = new ModalParameters();
                parameters.Add("Message", "Что-то пошло не так.");

                Modal.Show<Notification>("Notification", parameters);
            }
        }
    }

    private void EditLocation()
    {
        NavigationManager.NavigateTo($"/locations/edit/{LocationId}");
    }

    private void ToggleNpcsTable()
    {
        _hideNpcsTable = !_hideNpcsTable;
        StateHasChanged();
    }

    private void TogglePlayersTable()
    {
        _hidePlayersTable = !_hidePlayersTable;
        StateHasChanged();
    }
}
