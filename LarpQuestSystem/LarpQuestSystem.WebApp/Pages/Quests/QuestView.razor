@page "/quests/{QuestId:int}"
@using LarpQuestSystem.Data.Model
@using LarpQuestSystem.WebApp.Components.Utils

@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IModalService Modal
@inject IJSRuntime JsRuntime

<h1>Квест</h1>

@if (_quest == null)
{
    <p><em>@_message</em></p>
}
else
{
    <p><em>Имя: @_quest.Name</em></p>
    <p><em>Описание: @_quest.Description</em></p>
    <p>
        <em>Художественный текст: @GetStatus(_quest.IsArtisticTextReady)</em>
        @if (!string.IsNullOrEmpty(_quest.ArtisticTextLink))
        {
            <button class="btn btn-primary" @onclick="EditArtisticTextDocument"> <span class="oi oi-pencil" aria-hidden="true"></span> Редактировать документ</button>
            <button class="btn btn-primary" @onclick="@ChangeArtisticTextStatus"> Сменить статус </button>
        }
    </p>
    <p>
        <em>Техническое описание: @GetStatus(_quest.IsTechnicalDescriptionReady)</em>
        @if (!string.IsNullOrEmpty(_quest.TechnicalDescriptionLink))
        {
            <button class="btn btn-primary" @onclick="EditTechnicalTextDocument"> <span class="oi oi-pencil" aria-hidden="true"></span> Редактировать документ</button>
            <button class="btn btn-primary" @onclick="@ChangeTechnicalTextStatus"> Сменить статус </button>
        }
    </p>
    <p>
        <em>Готовность по печати: @GetStatus(_quest.IsPrinted)</em>
        <button class="btn btn-primary" @onclick="@ChangePrintedStatus"> Сменить статус </button>
    </p>
    <p><em>Квест выдает: @_quest.QuestGiver.Name</em></p>
    <p><em>Квест принимает: @_quest.QuestEnding.Name</em></p>
    <p><em>Количество копий в печать: @_quest.AmountToPrint</em></p>
    <p><em>Сложность: @GetComplexity(_quest.Complexity)</em></p>
    <p><em>Градация: @GetGrade(_quest.Complexity)</em></p>
    <div style="margin-bottom: 10px">
        <button class="btn btn-primary" @onclick="@EditQuest">Редактировать Квест</button>
        <button class="btn btn-primary" @onclick="@DeleteQuest">Удалить квест</button>
    </div>
    @if (_quest.QuestChains.Any())
    {
        <br />
        <br />
        <hr />
        <h2>Таблица цепочек квеста</h2>
        <table class="table">
            <thead>
                <tr>
                    <th>Цепочка квестов</th>
                    <th>Шаг</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var questChain in _quest.QuestChains)
                {
                    <tr @onclick="(() => NavigateToChainView(questChain.ChainId))">
                        <td>@questChain.Chain.Name</td>
                        <td>@questChain.StepNumber</td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p><em>Квест не участвует в цепочках.</em></p>
    }
}

@code {
    private string _message = "Загрузка...";
    private Quest _quest;

    [Parameter]
    public int QuestId { get; set; }

    [CascadingParameter(Name = "BaseApiUrl")] protected string BaseApiUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _quest = await Http.GetJsonAsync<Quest>($"{BaseApiUrl}/quests/{QuestId}");
    }

    private async Task DeleteQuest()
    {
        if (_quest.QuestChains.Any())
        {
            var parameters = new ModalParameters();
            parameters.Add("Message", "Этот квест участвует в цепочке. Сначала удалите его из цепочки.");

            Modal.Show<Notification>("Notification", parameters);
        }
        else
        {
            var response = await Http.DeleteAsync($"{BaseApiUrl}/quests/{QuestId}");
            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/quests");
            }
            else
            {
                var parameters = new ModalParameters();
                parameters.Add("Message", "Что-то пошло не так.");

                Modal.Show<Notification>("Notification", parameters);
            }
        }
    }

    private void EditArtisticTextDocument()
    {
        JsRuntime.InvokeAsync<object>("open", _quest.ArtisticTextLink, "_black");
    }

    private void EditTechnicalTextDocument()
    {
        JsRuntime.InvokeAsync<object>("open", _quest.TechnicalDescriptionLink, "_black");
    }

    private async Task ChangeArtisticTextStatus()
    {
        _quest.IsArtisticTextReady = !_quest.IsArtisticTextReady;
        await Http.PutJsonAsync<Quest>($"{BaseApiUrl}/quests", _quest);
        StateHasChanged();
    }

    private async Task ChangePrintedStatus()
    {
        _quest.IsPrinted = !_quest.IsPrinted;
        await Http.PutJsonAsync<Quest>($"{BaseApiUrl}/quests", _quest);
        StateHasChanged();
    }

    private string GetStatus(bool isReady)
    {
        if (isReady)
        {
            return "Готово.";
        }

        return "Не готово.";
    }

    private string GetComplexity(int complexity)
    {
        var enumValue = (QuestComplexity)complexity;
        return enumValue.GetStringValue();
    }

    private string GetGrade(int grade)
    {
        var enumValue = (QuestGrade)grade;
        return enumValue.GetStringValue();
    }

    private async Task ChangeTechnicalTextStatus()
    {
        _quest.IsTechnicalDescriptionReady = !_quest.IsTechnicalDescriptionReady;
        await Http.PutJsonAsync<Quest>($"{BaseApiUrl}/quests", _quest);
        StateHasChanged();
    }

    private void NavigateToChainView(int chainId)
    {
        NavigationManager.NavigateTo($"/chains/{chainId}");
    }

    private void EditQuest()
    {
        NavigationManager.NavigateTo($"/quests/edit/{QuestId}");
    }
}
