@page "/quests/{QuestId:int}"
@using LarpQuestSystem.Data.Model
@using LarpQuestSystem.WebApp.Components.Utils
@using LarpQuestSystem.WebApp.Components.Players
@using LarpQuestSystem.WebApp.Components.Chains
@using LarpQuestSystem.WebApp.Components.Items

@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IModalService Modal
@inject IJSRuntime JsRuntime

<h1>Квест</h1>

@if (_quest == null)
{
    <p><em>@_message</em></p>
}
else
{
    <p>Имя: @_quest.Name</p>
    <p>Описание: @_quest.Description</p>
    <p>
        Художественный текст: @GetStatus(_quest.IsArtisticTextReady)
        @if (!string.IsNullOrEmpty(_quest.ArtisticTextLink))
        {
            <button class="btn btn-primary" @onclick="@EditArtisticTextDocument"> <span class="oi oi-pencil" aria-hidden="true"></span> Редактировать документ</button>
            <button class="btn btn-primary" @onclick="@ChangeArtisticTextStatus"> Сменить статус </button>
        }
    </p>
    <p>
        Техническое описание: @GetStatus(_quest.IsTechnicalDescriptionReady)
        @if (!string.IsNullOrEmpty(_quest.TechnicalDescriptionLink))
        {
            <button class="btn btn-primary" @onclick="@EditTechnicalTextDocument"> <span class="oi oi-pencil" aria-hidden="true"></span> Редактировать документ</button>
            <button class="btn btn-primary" @onclick="@ChangeTechnicalTextStatus"> Сменить статус </button>
        }
    </p>
    <p>
        Готовность по печати: @GetStatus(_quest.IsPrinted)
        <button class="btn btn-primary" @onclick="@ChangePrintedStatus"> Сменить статус </button>
    </p>
    <p>Квест выдает: <button class="btn btn-primary" @onclick="(() => NavigateToNpcView(_questGiver.Id))">@_questGiver.Name</button></p>
    <p>Квест принимает: <button class="btn btn-primary" @onclick="(() => NavigateToNpcView(_questEnding.Id))">@_questEnding.Name</button></p>
    <p>Количество копий в печать: @_quest.AmountToPrint</p>
    <p>Сложность: @GetComplexity(_quest.Complexity)</p>
    <p>Градация: @GetGrade(_quest.Complexity)</p>
    <div style="margin-bottom: 10px">
        <button class="btn btn-primary" @onclick="@EditQuest">Редактировать Квест</button>
        <button class="btn btn-primary" @onclick="@DeleteQuest">Удалить квест</button>
    </div>
    @if (_chains.Any())
    {
        <br />
        <br />
        <hr />
        <h2>Цепочки, в которых участвует квест <button class="btn btn-primary" @onclick="@ToggleChainsTable">@(!_hideChainsTable ? "Скрыть" : "Показать")</button></h2>
        @if (!_hideChainsTable)
        {
            <CascadingValue Value=@_chains>
                <ChainsTable />
            </CascadingValue>
        }
    }
    @if (_players.Any())
    {
        <br />
        <br />
        <hr />
        <h2>Игроки, получившие этот квест.<button class="btn btn-primary" @onclick="@TogglePlayersTable">@(!_hidePlayersTable ? "Скрыть" : "Показать")</button></h2>
        @if (!_hidePlayersTable)
        {
            <CascadingValue Value=@_players>
                <PlayersTable />
            </CascadingValue>
        }
    }
    @if (_items.Any())
    {
        <br />
        <br />
        <hr />
        <h2>Предметы, участвующие в квесте.<button class="btn btn-primary" @onclick="@ToggleItemsTable">@(!_hideItemsTable ? "Скрыть" : "Показать")</button></h2>
        @if (!_hideItemsTable)
        {
            <CascadingValue Value=@_items>
                <ItemQuestTable />
            </CascadingValue>
        }
    }
}

@code {
    private string _message = "Загрузка...";
    private QuestInfoView _questView;
    private Quest _quest;
    private List<Player> _players;
    private List<Chain> _chains;
    private List<QuestItem> _items;
    private Npc _questGiver;
    private Npc _questEnding;
    private bool _hideChainsTable;
    private bool _hidePlayersTable;
    private bool _hideItemsTable;

    [Parameter]
    public int QuestId { get; set; }

    [CascadingParameter(Name = "BaseApiUrl")] protected string BaseApiUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _questView = await Http.GetJsonAsync<QuestInfoView>($"{BaseApiUrl}/quests/{QuestId}");
        _quest = _questView.Quest;
        _players = _questView.Players;
        _chains = _questView.Chains;
        _items = _questView.QuestItems;
        _questGiver = _questView.QuestGiver;
        _questEnding = _questView.QuestEnding;
        _hidePlayersTable = false;
        _hideChainsTable = false;
        _hideItemsTable = false;
    }

    private async Task DeleteQuest()
    {
        if (_chains.Any())
        {
            var parameters = new ModalParameters();
            parameters.Add("Message", "Этот квест участвует в цепочке. Сначала удалите его из цепочки.");

            Modal.Show<Notification>("Notification", parameters);
        }
        else
        {
            var response = await Http.DeleteAsync($"{BaseApiUrl}/quests/{QuestId}");
            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/quests");
            }
            else
            {
                var parameters = new ModalParameters();
                parameters.Add("Message", "Что-то пошло не так.");

                Modal.Show<Notification>("Notification", parameters);
            }
        }
    }

    private void EditArtisticTextDocument()
    {
        JsRuntime.InvokeAsync<object>("open", _quest.ArtisticTextLink, "_black");
    }

    private void EditTechnicalTextDocument()
    {
        JsRuntime.InvokeAsync<object>("open", _quest.TechnicalDescriptionLink, "_black");
    }

    private async Task ChangeArtisticTextStatus()
    {
        _quest.IsArtisticTextReady = !_quest.IsArtisticTextReady;
        await Http.PutJsonAsync<Quest>($"{BaseApiUrl}/quests", _quest);
        StateHasChanged();
    }

    private async Task ChangePrintedStatus()
    {
        _quest.IsPrinted = !_quest.IsPrinted;
        await Http.PutJsonAsync<Quest>($"{BaseApiUrl}/quests", _quest);
        StateHasChanged();
    }

    private string GetStatus(bool isReady)
    {
        if (isReady)
        {
            return "Готово.";
        }

        return "Не готово.";
    }

    private string GetComplexity(int complexity)
    {
        var enumValue = (QuestComplexity)complexity;
        return enumValue.GetStringValue();
    }

    private string GetGrade(int grade)
    {
        var enumValue = (QuestGrade)grade;
        return enumValue.GetStringValue();
    }

    private async Task ChangeTechnicalTextStatus()
    {
        _quest.IsTechnicalDescriptionReady = !_quest.IsTechnicalDescriptionReady;
        await Http.PutJsonAsync<Quest>($"{BaseApiUrl}/quests", _quest);
        StateHasChanged();
    }

    private void ToggleChainsTable()
    {
        _hideChainsTable = !_hideChainsTable;
        StateHasChanged();
    }

    private void TogglePlayersTable()
    {
        _hidePlayersTable = !_hidePlayersTable;
        StateHasChanged();
    }

    private void ToggleItemsTable()
    {
        _hideItemsTable = !_hideItemsTable;
        StateHasChanged();
    }

    private void EditQuest()
    {
        NavigationManager.NavigateTo($"/quests/edit/{QuestId}");
    }

    private void NavigateToNpcView(int npcId)
    {
        NavigationManager.NavigateTo($"/npcs/{npcId}");
    }
}
