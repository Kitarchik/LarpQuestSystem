@page "/quests/edit/{QuestId:int}"
@using LarpQuestSystem.Data.Model
@using LarpQuestSystem.WebApp.Components.Utils

@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IModalService Modal

<h1>Редактировать квест</h1>

@if (_quest == null)
{
    <p><em>@_message</em></p>
}
else
{
    <div class="form-group row">
        <label for="txtQuestName" class="col-sm-2 col-form-label">Название квеста</label>
        <div class="col-sm-10">
            <input type="text" id="txtQuestName" class="form-control" @bind="@_quest.Name" />
        </div>
    </div>
    <div class="form-group row">
        <label for="txtQuestDescription" class="col-sm-2 col-form-label">Описание</label>
        <div class="col-sm-10">
            <textarea class="form-control" id="txtQuestDescription" rows="5" @bind="@_quest.Description"></textarea>
        </div>
    </div>
    <div class="form-group row">
        <label for="txtArtisticTextLink" class="col-sm-2 col-form-label">Ссылка на художественный текст</label>
        <div class="col-sm-10">
            <input type="text" id="txtArtisticTextLink" class="form-control" @bind="@_quest.ArtisticTextLink" />
        </div>
    </div>
    <div class="form-group row">
        <label for="txtTechnicalTextLink" class="col-sm-2 col-form-label">Ссылка на технический документ</label>
        <div class="col-sm-10">
            <input type="text" id="txtTechnicalTextLink" class="form-control" @bind="@_quest.TechnicalDescriptionLink">
        </div>
    </div>
    <div class="form-group row">
        <label for="txtAmountToPrint" class="col-sm-2 col-form-label">Количество копий в печать</label>
        <div class="col-sm-10">
            <input type="text" id="txtAmountToPrint" class="form-control" @bind="@_amountToPrintString" />
        </div>
    </div>
    <div class="form-group row">
        <label class="col-sm-2 col-form-label">НПС выдающий квест: </label>
        <FilterItems Items="@_npcs.Select(x=>x.Name).ToList()" SelectedItem="@_questView.QuestGiver.Name" OnItemSelect="@SelectQuestGiver" />
    </div>
    <div class="form-group row">
        <label class="col-sm-2 col-form-label">НПС принимающий квест: </label>
        <FilterItems Items="@_npcs.Select(x=>x.Name).ToList()" SelectedItem="@_questView.QuestEnding.Name" OnItemSelect="@SelectQuestEnding" />
    </div>
    <div class="form-group row">
        <label for="questComplexity" class="col-sm-2 col-form-label">Сложность квеста</label>
        <div class="col-sm-10">
            <select id="questComplexity" @bind="@_quest.Complexity">
                @foreach (int complexity in Enum.GetValues(typeof(QuestComplexity)))
                {
                    <option value="@complexity">@GetStringComplexityValue(complexity)</option>
                }
            </select>
        </div>
    </div>
    <div class="form-group row">
        <label for="questGrade" class="col-sm-2 col-form-label">Градация квеста</label>
        <div class="col-sm-10">
            <select id="questGrade" @bind="@_quest.Grade">
                @foreach (int grade in Enum.GetValues(typeof(QuestGrade)))
                {
                    <option value="@grade">@GetStringGradeValue(grade)</option>
                }
            </select>
        </div>
    </div>
    @for (int i = 0; i < _selectedPlayers.Count; i++)
    {
        <div class="form-group row">
            <p><em>Игрок/Команда: @_selectedPlayers[i].Name</em></p>
        </div>
    }
    <div class="form-group row">
        <label for="txtPlayerFilter" class="col-sm-2 col-form-label">Фильтр</label>
        <FilterItems Items="@_players.Select(x=>x.Name).ToList()" OnItemSelect="@SelectPlayer" />
    </div>
    <div class="form-group row">
        <button class="btn btn-primary" @onclick="@AddPlayer">Добавить игрока</button>
        <button class="btn btn-primary" @onclick="@DeletePlayer">Убрать игрока</button>
    </div>
    @if (_selectedItems != null)
    {
        @for (int i = 0; i < _selectedItems.Count; i++)
        {
            <div class="form-group row">
                <div class="col-sm-10">
                    <p><em>Предмет: @_selectedItems[i].Item.Name  Количество: @_selectedItems[i].AmountNeeded  НПС, хранящий предмет: @_selectedItems[i].StartingNpc.Name</em></p>
                </div>
            </div>
        }
    }
    <div class="form-group row">
        <div class="col-sm-10">
            <label class="col-sm-2 col-form-label">Выберите предмет</label>
            <FilterItems Items="@_items.Select(x=>x.Name).ToList()" OnItemSelect="@SelectItem" />
        </div>
        <div class="col-sm-10">
            <label class="col-sm-2 col-form-label">Выберите НПС у которого он хранится</label>
            <FilterItems Items="@_npcs.Select(x=>x.Name).ToList()" OnItemSelect="@SelectNpcForItem" />
        </div>
        <div class="col-sm-10">
            <label for="txtItemAmount" class="col-sm-2 col-form-label">Требуемое количество предметов: </label>
            <input type="text" id="txtItemAmount" @bind="@_itemAmountNeeded" />
        </div>
        <div class="col-sm-10">
            <label for="txtTechnicalDocument" class="col-sm-2 col-form-label">Технический документ для НПС: </label>
            <input type="text" id="txtTechnicalDocument" @bind="@_itemTechnicalDocument" />
        </div>
    </div>
    <div class="form-group">
        <button class="btn btn-primary" @onclick="@AddItem">Добавить предмет</button>
        <button class="btn btn-primary" @onclick="@DeleteItem">Убрать предмет</button>
    </div>
    <div class="form-group">
        <button class="btn btn-primary" @onclick="@Submit">Сохранить</button>
        <button class="btn btn-primary" @onclick="@Cancel">Отмена</button>
    </div>
}

@code {
    private string _message = "Загрузка...";
    private Quest _quest;
    private QuestInfoView _questView;
    private List<Quest> _quests;
    private List<Npc> _npcs;
    private List<Player> _players;
    private List<Item> _items;
    private Player _selectedPlayer;
    private List<Player> _selectedPlayers;
    private List<Player> _initialPlayers;
    private List<QuestItem> _initialItems;
    private List<QuestItem> _selectedItems;
    private QuestItem _selectedItem;
    private string _amountToPrintString;
    private string _itemAmountNeeded = "1";
    private string _itemTechnicalDocument;

    [Parameter]
    public int QuestId { get; set; }

    [CascadingParameter(Name = "BaseApiUrl")] protected string BaseApiUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _quests = await Http.GetJsonAsync<List<Quest>>($"{BaseApiUrl}/quests");
        _questView = await Http.GetJsonAsync<QuestInfoView>($"{BaseApiUrl}/quests/{QuestId}");
        _quest = _questView.Quest;
        _amountToPrintString = _quest.AmountToPrint.ToString();
        _npcs = await Http.GetJsonAsync<List<Npc>>($"{BaseApiUrl}/npcs");
        _players = await Http.GetJsonAsync<List<Player>>($"{BaseApiUrl}/players");
        _items = await Http.GetJsonAsync<List<Item>>($"{BaseApiUrl}/items");
        _initialPlayers = _questView.Players;
        _selectedPlayers = _initialPlayers.ToList();
        _initialItems = _questView.QuestItems;
        _selectedItems = _initialItems.ToList();
        _selectedItem = new QuestItem();
    }

    protected async Task Submit()
    {
        if (_quests.Any(x => x.Name == _quest.Name && x.Id != _quest.Id))
        {
            var parameters = new ModalParameters();
            parameters.Add("Message", "Квест с таким именем уже существует.");

            Modal.Show<Notification>("Notification", parameters);
        }
        else if (string.IsNullOrEmpty(_quest.Name))
        {
            var parameters = new ModalParameters();
            parameters.Add("Message", "Имя не может быть пустым.");

            Modal.Show<Notification>("Notification", parameters);
        }
        else if (!int.TryParse(_amountToPrintString, out int result) || result < 1)
        {
            var parameters = new ModalParameters();
            parameters.Add("Message", "Введите нормальное число. Будьте людьми то.");

            Modal.Show<Notification>("Notification", parameters);
        }
        else
        {
            _quest.AmountToPrint = int.Parse(_amountToPrintString);
            await Http.PutJsonAsync<Quest>($"{BaseApiUrl}/quests", _quest);
            var questPlayers = await Http.GetJsonAsync<List<QuestPlayer>>($"{BaseApiUrl}/questPlayers");
            foreach (var player in _initialPlayers)
            {
                var questPlayer = questPlayers.First(x => x.QuestId == _quest.Id && x.PlayerId == player.Id);
                var response = await Http.DeleteAsync($"{BaseApiUrl}/questPlayers/{questPlayer.Id}");
                if (!response.IsSuccessStatusCode)
                {
                    var parameters = new ModalParameters();
                    parameters.Add("Message", "Что-то пошло не так c игроками.");

                    Modal.Show<Notification>("Notification", parameters);
                }
            }
            foreach (var player in _selectedPlayers)
            {
                var questPlayer = new QuestPlayer
                {
                    QuestId = QuestId,
                    PlayerId = player.Id,
                };
                await Http.PostJsonAsync<QuestPlayer>($"{BaseApiUrl}/questPlayers", questPlayer);
            }
            foreach (var item in _initialItems)
            {
                var response = await Http.DeleteAsync($"{BaseApiUrl}/questItems/{item.Id}");
                if (!response.IsSuccessStatusCode)
                {
                    var parameters = new ModalParameters();
                    parameters.Add("Message", "Что-то пошло не так с предметами.");

                    Modal.Show<Notification>("Notification", parameters);
                }
            }
            foreach (var item in _selectedItems)
            {
                var newItem = new QuestItem
                {
                    QuestId = QuestId,
                    ItemId = item.ItemId,
                    StartingNpcId = item.StartingNpcId,
                    TechnicalDocumentForNpc = item.TechnicalDocumentForNpc,
                    AmountNeeded = item.AmountNeeded,
                };
                await Http.PostJsonAsync<QuestPlayer>($"{BaseApiUrl}/questItems", newItem);
            }
            NavigationManager.NavigateTo($"/quests/{QuestId}");
        }
    }

    private string GetStringComplexityValue(int complexity)
    {
        var enumValue = (QuestComplexity)complexity;
        return enumValue.GetStringValue();
    }

    private string GetStringGradeValue(int grade)
    {
        var enumValue = (QuestGrade)grade;
        return enumValue.GetStringValue();
    }

    private void AddPlayer()
    {
        if (_selectedPlayer != null && _selectedPlayer.Id > 0)
        {
            _selectedPlayers.Add(new Player
            {
                Id = _selectedPlayer.Id,
                Name = _selectedPlayer.Name,
            });
        }
        StateHasChanged();
    }

    private void DeletePlayer()
    {
        if (_selectedPlayers != null && _selectedPlayers.Count > 0)
        {
            _selectedPlayers.RemoveAt(_selectedPlayers.Count - 1);
            StateHasChanged();
        }
    }

    private void AddItem()
    {
        if (!int.TryParse(_itemAmountNeeded, out int result))
        {
            var parameters = new ModalParameters();
            parameters.Add("Message", "Укажите количество предметов.");

            Modal.Show<Notification>("Notification", parameters);
        }
        else if (_selectedItem != null && _selectedItem.ItemId > 0 && _selectedItem.StartingNpcId > 0 && int.Parse(_itemAmountNeeded) > 0)
        {
            _selectedItem.AmountNeeded = int.Parse(_itemAmountNeeded);
            _selectedItems.Add(new QuestItem
            {
                AmountNeeded = _selectedItem.AmountNeeded,
                ItemId = _selectedItem.ItemId,
                Item = _selectedItem.Item,
                StartingNpc = _selectedItem.StartingNpc,
                StartingNpcId = _selectedItem.StartingNpcId,
                TechnicalDocumentForNpc = _itemTechnicalDocument,
            });
            _selectedItem = new QuestItem();
            _itemAmountNeeded = "1";
            StateHasChanged();
        }
    }

    private void DeleteItem()
    {
        if (_selectedItems != null && _selectedItems.Count > 0)
        {
            _selectedItems.RemoveAt(_selectedItems.Count - 1);
            StateHasChanged();
        }
    }

    private void SelectQuestGiver(string questGiverName)
    {
        _quest.QuestGiverId = _npcs.First(x => x.Name == questGiverName).Id;
    }

    private void SelectQuestEnding(string questEndingName)
    {
        _quest.QuestEndingId = _npcs.First(x => x.Name == questEndingName).Id;
    }

    private void SelectPlayer(string playerName)
    {
        _selectedPlayer = _players.FirstOrDefault(x => x.Name == playerName);
    }

    private void SelectItem(string itemName)
    {
        var item = _items.First(x => x.Name == itemName);
        _selectedItem.ItemId = item.Id;
        _selectedItem.Item = new Item
        {
            Name = item.Name,
        };
    }

    private void SelectNpcForItem(string npcName)
    {
        var npc = _npcs.First(x => x.Name == npcName);
        _selectedItem.StartingNpcId = npc.Id;
        _selectedItem.StartingNpc = npc;
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo($"/quests/{QuestId}");
    }
}